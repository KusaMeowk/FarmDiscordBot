"""
Demo: Gemini Game Master Weather Control System
Minh h·ªça c√°ch Gemini c√≥ th·ªÉ thay ƒë·ªïi th·ªùi ti·∫øt m·ªói 15 ph√∫t d·ª±a tr√™n game state
"""

import asyncio
import json
from datetime import datetime, timedelta
from typing import Dict, Any

class WeatherControlDemo:
    """Demo h·ªá th·ªëng ƒëi·ªÅu khi·ªÉn th·ªùi ti·∫øt c·ªßa Gemini Game Master"""
    
    def __init__(self):
        self.weather_types = [
            'sunny',    # N·∫Øng - tƒÉng tr∆∞·ªüng nhanh, gi√° b√°n cao
            'cloudy',   # M√¢y - c√¢n b·∫±ng
            'rainy',    # M∆∞a - tƒÉng ch·∫•t l∆∞·ª£ng, gi√° h·∫°t gi·ªëng r·∫ª
            'windy',    # Gi√≥ - tƒÉng t·ªëc ƒë·ªô thu ho·∫°ch
            'foggy',    # S∆∞∆°ng m√π - gi·∫£m hi·ªáu su·∫•t
            'storm',    # B√£o - r·ªßi ro cao, ph·∫ßn th∆∞·ªüng cao
            'drought'   # H·∫°n h√°n - gi√° n∆∞·ªõc tƒÉng, c√¢y kh√≥ tr·ªìng
        ]
        
        self.weather_effects = {
            'sunny': {
                'growth_rate': 1.3,
                'sell_price': 1.2,
                'quality_bonus': 1.0,
                'satisfaction': 0.8,
                'best_for': 'TƒÉng thu nh·∫≠p nhanh'
            },
            'cloudy': {
                'growth_rate': 1.0,
                'sell_price': 1.0,
                'quality_bonus': 1.1,
                'satisfaction': 0.7,
                'best_for': 'C√¢n b·∫±ng chung'
            },
            'rainy': {
                'growth_rate': 1.1,
                'sell_price': 0.9,
                'quality_bonus': 1.4,
                'satisfaction': 0.6,
                'best_for': 'TƒÉng ch·∫•t l∆∞·ª£ng c√¢y tr·ªìng'
            },
            'windy': {
                'growth_rate': 1.2,
                'sell_price': 1.1,
                'quality_bonus': 0.9,
                'satisfaction': 0.5,
                'best_for': 'Thu ho·∫°ch nhanh'
            },
            'foggy': {
                'growth_rate': 0.8,
                'sell_price': 1.3,
                'quality_bonus': 0.8,
                'satisfaction': 0.4,
                'best_for': 'Gi√° b√°n cao nh∆∞ng kh√≥ tr·ªìng'
            },
            'storm': {
                'growth_rate': 0.7,
                'sell_price': 1.5,
                'quality_bonus': 1.2,
                'satisfaction': 0.3,
                'best_for': 'R·ªßi ro cao, l·ª£i nhu·∫≠n cao'
            },
            'drought': {
                'growth_rate': 0.6,
                'sell_price': 1.4,
                'quality_bonus': 0.7,
                'satisfaction': 0.2,
                'best_for': 'Th·ª≠ th√°ch cho ng∆∞·ªùi ch∆°i gi√†u c√≥'
            }
        }
    
    def simulate_game_state(self, time_of_day: int, active_players: int, economic_health: float) -> Dict[str, Any]:
        """M√¥ ph·ªèng tr·∫°ng th√°i game t·∫°i th·ªùi ƒëi·ªÉm c·ª• th·ªÉ"""
        return {
            'time_of_day': time_of_day,  # 0-23
            'active_players_15min': active_players,
            'total_players': active_players * 3,
            'economic_health_score': economic_health,
            'player_satisfaction': 0.7,
            'weather_duration_remaining': 5,  # < 15 minutes = c·∫ßn thay ƒë·ªïi
            'current_weather': 'sunny',
            'weather_satisfaction': 0.6
        }
    
    def gemini_weather_decision(self, game_state: Dict[str, Any]) -> Dict[str, Any]:
        """M√¥ ph·ªèng quy·∫øt ƒë·ªãnh th·ªùi ti·∫øt c·ªßa Gemini Game Master"""
        
        # Ph√¢n t√≠ch t√¨nh h√¨nh
        time = game_state['time_of_day']
        active_players = game_state['active_players_15min']
        economic_health = game_state['economic_health_score']
        current_weather = game_state['current_weather']
        weather_satisfaction = game_state['weather_satisfaction']
        
        # Logic quy·∫øt ƒë·ªãnh th·ªùi ti·∫øt
        if time >= 6 and time <= 18:  # Ban ng√†y (6h-18h)
            if active_players > 10:  # Nhi·ªÅu ng∆∞·ªùi ch∆°i
                if economic_health < 0.6:  # Kinh t·∫ø y·∫øu
                    # Ch·ªçn th·ªùi ti·∫øt tƒÉng thu nh·∫≠p
                    recommended_weather = 'sunny'
                    reasoning = "Ban ng√†y + nhi·ªÅu ng∆∞·ªùi ch∆°i + kinh t·∫ø y·∫øu ‚Üí c·∫ßn th·ªùi ti·∫øt tƒÉng thu nh·∫≠p"
                elif weather_satisfaction < 0.6:  # Kh√¥ng h√†i l√≤ng v·ªõi th·ªùi ti·∫øt
                    # Thay ƒë·ªïi ƒë·ªÉ tƒÉng satisfaction
                    recommended_weather = 'cloudy' if current_weather in ['storm', 'drought'] else 'rainy'
                    reasoning = "Th·ªùi ti·∫øt hi·ªán t·∫°i kh√¥ng ƒë∆∞·ª£c ∆∞a chu·ªông ‚Üí chuy·ªÉn sang th·ªùi ti·∫øt c√¢n b·∫±ng h∆°n"
                else:
                    # T·∫°o th·ª≠ th√°ch nh·∫π
                    recommended_weather = 'windy'
                    reasoning = "T√¨nh h√¨nh t·ªët ‚Üí t·∫°o th·ª≠ th√°ch nh·∫π v·ªõi th·ªùi ti·∫øt windy"
            else:  # √çt ng∆∞·ªùi ch∆°i
                # Th·ªùi ti·∫øt d·ªÖ ch∆°i ƒë·ªÉ khuy·∫øn kh√≠ch
                recommended_weather = 'sunny'
                reasoning = "√çt ng∆∞·ªùi ch∆°i ‚Üí ch·ªçn th·ªùi ti·∫øt d·ªÖ ch∆°i ƒë·ªÉ khuy·∫øn kh√≠ch tham gia"
        else:  # Ban ƒë√™m (19h-5h)
            if active_players > 5:  # V·∫´n c√≥ ng∆∞·ªùi ch∆°i ƒë√™m
                # T·∫°o th·ª≠ th√°ch th√∫ v·ªã
                recommended_weather = 'storm' if economic_health > 0.7 else 'rainy'
                reasoning = "Ban ƒë√™m + c√≥ ng∆∞·ªùi ch∆°i ‚Üí t·∫°o th·ª≠ th√°ch th√∫ v·ªã"
            else:
                # Th·ªùi ti·∫øt nh·∫π nh√†ng cho ng∆∞·ªùi ch∆°i ƒë√™m
                recommended_weather = 'cloudy'
                reasoning = "Ban ƒë√™m + √≠t ng∆∞·ªùi ‚Üí th·ªùi ti·∫øt nh·∫π nh√†ng"
        
        # T√≠nh th·ªùi gian duy tr√¨ (15-60 ph√∫t t√πy t√¨nh h√¨nh)
        if active_players > 15:
            duration_minutes = 15  # Thay ƒë·ªïi nhanh khi ƒë√¥ng ng∆∞·ªùi
        elif active_players > 5:
            duration_minutes = 30  # Trung b√¨nh
        else:
            duration_minutes = 60  # √çt ng∆∞·ªùi th√¨ gi·ªØ l√¢u h∆°n
        
        return {
            "analysis": f"Th·ªùi gian: {time}h, Ng∆∞·ªùi ch∆°i: {active_players}, Kinh t·∫ø: {economic_health:.1%}",
            "action_type": "weather_control",
            "reasoning": reasoning,
            "confidence": 0.85,
            "parameters": {
                "weather_type": recommended_weather,
                "duration_hours": duration_minutes / 60
            },
            "expected_impact": f"TƒÉng {self.weather_effects[recommended_weather]['best_for']}",
            "priority": "high" if game_state['weather_duration_remaining'] < 10 else "medium",
            "affected_users": "all"
        }
    
    def run_24hour_simulation(self):
        """Ch·∫°y m√¥ ph·ªèng 24 gi·ªù v·ªõi Gemini thay ƒë·ªïi th·ªùi ti·∫øt m·ªói 15 ph√∫t"""
        print("üå§Ô∏è GEMINI GAME MASTER - WEATHER CONTROL SIMULATION")
        print("=" * 60)
        print("M√¥ ph·ªèng 24 gi·ªù v·ªõi Gemini thay ƒë·ªïi th·ªùi ti·∫øt m·ªói 15 ph√∫t")
        print()
        
        weather_schedule = []
        
        # M√¥ ph·ªèng t·ª´ng khung gi·ªù
        for hour in range(24):
            # T√≠nh s·ªë ng∆∞·ªùi ch∆°i d·ª±a tr√™n gi·ªù
            if 6 <= hour <= 9:  # S√°ng s·ªõm
                active_players = 8
            elif 10 <= hour <= 12:  # Tr∆∞a
                active_players = 15
            elif 13 <= hour <= 17:  # Chi·ªÅu
                active_players = 20
            elif 18 <= hour <= 22:  # T·ªëi
                active_players = 25
            else:  # ƒê√™m khuya
                active_players = 3
            
            # T√≠nh s·ª©c kh·ªèe kinh t·∫ø (dao ƒë·ªông theo th·ªùi gian)
            economic_health = 0.5 + 0.3 * (active_players / 25)
            
            # T·∫°o game state
            game_state = self.simulate_game_state(hour, active_players, economic_health)
            
            # Gemini ƒë∆∞a ra quy·∫øt ƒë·ªãnh
            decision = self.gemini_weather_decision(game_state)
            
            # L∆∞u v√†o l·ªãch tr√¨nh
            weather_info = {
                'time': f"{hour:02d}:00",
                'weather': decision['parameters']['weather_type'],
                'duration': int(decision['parameters']['duration_hours'] * 60),
                'players': active_players,
                'reasoning': decision['reasoning'],
                'effects': self.weather_effects[decision['parameters']['weather_type']]
            }
            weather_schedule.append(weather_info)
            
            # In th√¥ng tin
            print(f"‚è∞ {weather_info['time']} | üå§Ô∏è {weather_info['weather'].upper():<8} | "
                  f"üë• {weather_info['players']:2d} players | ‚è±Ô∏è {weather_info['duration']:2d}min")
            print(f"   üí° {weather_info['reasoning']}")
            print(f"   üìä Growth: {weather_info['effects']['growth_rate']:.1f}x | "
                  f"Price: {weather_info['effects']['sell_price']:.1f}x | "
                  f"Quality: {weather_info['effects']['quality_bonus']:.1f}x")
            print()
        
        # Th·ªëng k√™ t·ªïng k·∫øt
        print("üìà TH·ªêNG K√ä T·ªîNG K·∫æT")
        print("=" * 60)
        
        weather_count = {}
        for entry in weather_schedule:
            weather = entry['weather']
            weather_count[weather] = weather_count.get(weather, 0) + 1
        
        print("üå§Ô∏è Ph√¢n b·ªë th·ªùi ti·∫øt trong 24h:")
        for weather, count in sorted(weather_count.items()):
            percentage = (count / 24) * 100
            print(f"   {weather:<8}: {count:2d} l·∫ßn ({percentage:4.1f}%)")
        
        print(f"\nüéØ T·ªïng s·ªë l·∫ßn thay ƒë·ªïi: {len(weather_schedule)} l·∫ßn")
        print(f"‚è±Ô∏è Trung b√¨nh m·ªói {24*60/len(weather_schedule):.0f} ph√∫t thay ƒë·ªïi 1 l·∫ßn")
        
        # L∆∞u k·∫øt qu·∫£
        with open('cache/gemini_weather_simulation.json', 'w', encoding='utf-8') as f:
            json.dump({
                'simulation_time': datetime.now().isoformat(),
                'weather_schedule': weather_schedule,
                'statistics': weather_count
            }, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ K·∫øt qu·∫£ ƒë√£ l∆∞u v√†o: cache/gemini_weather_simulation.json")

if __name__ == "__main__":
    demo = WeatherControlDemo()
    demo.run_24hour_simulation() 