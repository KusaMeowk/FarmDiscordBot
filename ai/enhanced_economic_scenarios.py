#!/usr/bin/env python3
"""
Enhanced Economic Scenarios - H·ªá th·ªëng t√¨nh hu·ªëng kinh t·∫ø ƒëa d·∫°ng
T·∫°o ra nhi·ªÅu scenarios phong ph√∫ ƒë·ªÉ ƒë∆∞a v√†o smart_cache.json
"""

import json
import random
from datetime import datetime, timedelta
from typing import Dict, List, Any, Tuple
from dataclasses import dataclass, asdict
from utils.enhanced_logging import get_bot_logger

logger = get_bot_logger()

@dataclass
class EconomicScenario:
    """ƒê·ªãnh nghƒ©a m·ªôt t√¨nh hu·ªëng kinh t·∫ø"""
    pattern: str
    name: str
    description: str
    triggers: Dict[str, Any]
    decision: Dict[str, Any]
    frequency: str  # common, uncommon, rare, legendary
    season_preference: List[str]  # spring, summer, autumn, winter, all
    player_count_range: Tuple[int, int]
    economic_health_range: Tuple[float, float]

class EnhancedEconomicScenarios:
    """Qu·∫£n l√Ω t√¨nh hu·ªëng kinh t·∫ø ƒëa d·∫°ng"""
    
    def __init__(self):
        self.scenarios = self._create_scenario_database()
        self.seasonal_events = self._create_seasonal_events()
        self.crisis_scenarios = self._create_crisis_scenarios()
        self.prosperity_scenarios = self._create_prosperity_scenarios()
        self.market_manipulation_scenarios = self._create_market_scenarios()
        
    def _create_scenario_database(self) -> List[EconomicScenario]:
        """T·∫°o database v·ªõi h∆°n 50 scenarios ƒëa d·∫°ng"""
        scenarios = []
        
        # === MORNING SCENARIOS (6AM - 12PM) ===
        scenarios.extend([
            EconomicScenario(
                pattern="high-good-medium-sunny-morning-balanced",
                name="üåÖ B√¨nh Minh V√†ng Son",
                description="√Ånh n·∫∑ng ban mai t·∫°o ƒëi·ªÅu ki·ªán l√Ω t∆∞∆°ng cho n√¥ng nghi·ªáp",
                triggers={"time": "morning", "weather": "sunny", "health": "good"},
                decision={
                    "action_type": "WEATHER_ENHANCEMENT",
                    "reasoning": "Th·ªùi ti·∫øt thu·∫≠n l·ª£i bu·ªïi s√°ng t·∫°o c∆° h·ªôi tƒÉng nƒÉng su·∫•t c√¢y tr·ªìng. N√™n t·∫≠n d·ª•ng momentum n√†y.",
                    "confidence": 0.85,
                    "parameters": {
                        "weather_type": "sunny",
                        "growth_boost": 1.25,
                        "duration_hours": 6,
                        "crop_types": ["all"]
                    },
                    "expected_impact": "TƒÉng 25% t·ªëc ƒë·ªô sinh tr∆∞·ªüng cho t·∫•t c·∫£ c√¢y tr·ªìng trong 6 gi·ªù",
                    "priority": "medium"
                },
                frequency="common",
                season_preference=["spring", "summer"],
                player_count_range=(10, 100),
                economic_health_range=(0.6, 1.0)
            ),
            
            EconomicScenario(
                pattern="medium-fair-high-cloudy-morning-unbalanced",
                name="‚òÅÔ∏è S∆∞∆°ng M√π K√¨ B√≠",
                description="L·ªõp s∆∞∆°ng m√π d√†y ƒë·∫∑c che ph·ªß n√¥ng tr·∫°i, t·∫°o ƒëi·ªÅu ki·ªán ƒë·∫∑c bi·ªát",
                triggers={"time": "morning", "weather": "cloudy", "player_mood": "neutral"},
                decision={
                    "action_type": "EVENT_TRIGGER", 
                    "reasoning": "S∆∞∆°ng m√π t·∫°o ƒëi·ªÅu ki·ªán l√Ω t∆∞·ªüng cho n·∫•m v√† c√¢y ƒÉn l√°. C∆° h·ªôi ki·∫øm ti·ªÅn hi·∫øm c√≥.",
                    "confidence": 0.9,
                    "parameters": {
                        "event_name": "üçÑ M√πa N·∫•m B√≠ ·∫®n",
                        "description": "S∆∞∆°ng m√π d√†y ƒë·∫∑c gi√∫p n·∫•m m·ªçc d√†y ƒë·∫∑c! Gi√° n·∫•m tƒÉng 200%",
                        "effect_type": "crop_price_bonus",
                        "target_crops": ["mushroom", "lettuce", "spinach"],
                        "multiplier": 3.0,
                        "duration_hours": 8,
                        "rarity": "rare"
                    },
                    "expected_impact": "TƒÉng m·∫°nh thu nh·∫≠p t·ª´ c√¢y ƒÉn l√° v√† n·∫•m",
                    "priority": "high"
                },
                frequency="rare",
                season_preference=["autumn", "winter"],
                player_count_range=(20, 200),
                economic_health_range=(0.3, 0.8)
            )
        ])
        
        # === AFTERNOON SCENARIOS (12PM - 6PM) ===
        scenarios.extend([
            EconomicScenario(
                pattern="high-good-low-sunny-afternoon-balanced",
                name="‚òÄÔ∏è N·∫Øng V√†ng Ch√°y",
                description="N·∫Øng g·∫Øt bu·ªïi tr∆∞a th·ª≠ th√°ch s·ª©c b·ªÅn c·ªßa n√¥ng d√¢n",
                triggers={"time": "afternoon", "weather": "sunny", "temperature": "high"},
                decision={
                    "action_type": "CHALLENGE_EVENT",
                    "reasoning": "N·∫Øng g·∫Øt t·∫°o th√°ch th·ª©c nh∆∞ng c≈©ng c√≥ c∆° h·ªôi. C√¢y ch·ªãu n·∫Øng s·∫Ω ph√°t tri·ªÉn m·∫°nh.",
                    "confidence": 0.8,
                    "parameters": {
                        "event_name": "üî• Th·ª≠ Th√°ch N·∫Øng G·∫Øt",
                        "description": "N·∫Øng c·ª±c g·∫Øt! C√¢y ch·ªãu h·∫°n ph√°t tri·ªÉn 150%, c√¢y kh√°c ch·∫≠m 25%",
                        "effect_type": "selective_growth",
                        "bonus_crops": ["tomato", "corn", "chili"],
                        "bonus_multiplier": 1.5,
                        "penalty_crops": ["lettuce", "cabbage"],
                        "penalty_multiplier": 0.75,
                        "duration_hours": 4
                    },
                    "expected_impact": "Khuy·∫øn kh√≠ch ƒëa d·∫°ng h√≥a c√¢y tr·ªìng v√† chi·∫øn thu·∫≠t farming",
                    "priority": "medium"
                },
                frequency="common",
                season_preference=["summer"],
                player_count_range=(5, 50),
                economic_health_range=(0.4, 0.9)
            ),
            
            EconomicScenario(
                pattern="low-poor-medium-rainy-afternoon-unbalanced", 
                name="üåßÔ∏è C∆°n M∆∞a C·ª©u Tinh",
                description="C∆°n m∆∞a xu·∫•t hi·ªán ƒë√∫ng l√∫c khi n√¥ng d√¢n ƒëang kh√≥ khƒÉn",
                triggers={"economic_health": "poor", "weather": "rainy", "time": "afternoon"},
                decision={
                    "action_type": "RECOVERY_EVENT",
                    "reasoning": "Kinh t·∫ø ƒëang kh√≥ khƒÉn, c·∫ßn s·ª± ki·ªán ph·ª•c h·ªìi ƒë·ªÉ gi√∫p ng∆∞·ªùi ch∆°i. M∆∞a mang l·∫°i hy v·ªçng m·ªõi.",
                    "confidence": 0.95,
                    "parameters": {
                        "event_name": "üíß H·ªìi Sinh ƒê·∫•t ƒêai",
                        "description": "C∆°n m∆∞a ph√π sa mang l·∫°i dinh d∆∞·ª°ng! T·∫•t c·∫£ c√¢y tr·ªìng tƒÉng 200% yield",
                        "effect_type": "yield_boost",
                        "multiplier": 3.0,
                        "duration_hours": 12,
                        "additional_effects": {
                            "free_seeds": 10,
                            "reduced_costs": 0.5
                        }
                    },
                    "expected_impact": "Ph·ª•c h·ªìi kinh t·∫ø player, tƒÉng motivation farming",
                    "priority": "critical"
                },
                frequency="uncommon",
                season_preference=["spring", "autumn"],
                player_count_range=(3, 30),
                economic_health_range=(0.1, 0.5)
            )
        ])
        
        # === EVENING SCENARIOS (6PM - 11PM) ===
        scenarios.extend([
            EconomicScenario(
                pattern="medium-fair-high-clear-evening-balanced",
                name="üåÖ Ho√†ng H√¥n C√°t T∆∞·ªùng",
                description="Ho√†ng h√¥n ƒë·∫πp mang l·∫°i c·∫£m h·ª©ng v√† may m·∫Øn cho n√¥ng d√¢n",
                triggers={"time": "evening", "weather": "clear", "mood": "positive"},
                decision={
                    "action_type": "LUCK_EVENT",
                    "reasoning": "Ho√†ng h√¥n ƒë·∫πp t·∫°o t√¢m tr·∫°ng t√≠ch c·ª±c. Th·ªùi ƒëi·ªÉm t·ªët cho s·ª± ki·ªán may m·∫Øn.",
                    "confidence": 0.88,
                    "parameters": {
                        "event_name": "üçÄ ƒêi·ªÅu ∆Ø·ªõc Ho√†ng H√¥n",
                        "description": "Ho√†ng h√¥n c√°t t∆∞·ªùng! 25% c∆° h·ªôi nh·∫≠n double coins khi harvest",
                        "effect_type": "luck_bonus",
                        "probability": 0.25,
                        "bonus_type": "double_coins",
                        "duration_hours": 6,
                        "activation": "on_harvest"
                    },
                    "expected_impact": "TƒÉng excitement v√† reward cho ng∆∞·ªùi ch∆°i active",
                    "priority": "medium"
                },
                frequency="uncommon",
                season_preference=["summer", "autumn"],
                player_count_range=(15, 80),
                economic_health_range=(0.5, 0.9)
            ),
            
            EconomicScenario(
                pattern="high-good-medium-windy-evening-concentrated",
                name="üí® Gi√≥ Th·ªïi C·ªßa C·∫£i",
                description="Gi√≥ m·∫°nh mang theo c∆° h·ªôi kinh doanh t·ª´ v√πng xa",
                triggers={"time": "evening", "weather": "windy", "distribution": "concentrated"},
                decision={
                    "action_type": "MARKET_EVENT",
                    "reasoning": "Ph√¢n ph·ªëi ti·ªÅn t·∫≠p trung ·ªü ng∆∞·ªùi gi√†u. C·∫ßn event ƒë·ªÉ lan t·ªèa richness ra community.",
                    "confidence": 0.82,
                    "parameters": {
                        "event_name": "üí∞ Th∆∞∆°ng Gia Xa X·ª©",
                        "description": "Th∆∞∆°ng gia t·ª´ v√πng xa ƒë·∫øn mua n√¥ng s·∫£n! Gi√° mua +50%, nh∆∞ng ch·ªâ 3 ng∆∞·ªùi ƒë·∫ßu ti√™n",
                        "effect_type": "limited_bonus",
                        "price_multiplier": 1.5,
                        "participant_limit": 3,
                        "duration_hours": 2,
                        "first_come_first_serve": True
                    },
                    "expected_impact": "T·∫°o c·∫°nh tranh l√†nh m·∫°nh, khuy·∫øn kh√≠ch ng∆∞·ªùi ch∆°i active",
                    "priority": "high"
                },
                frequency="rare",
                season_preference=["all"],
                player_count_range=(10, 60),
                economic_health_range=(0.6, 1.0)
            )
        ])
        
        # === NIGHT SCENARIOS (11PM - 6AM) ===
        scenarios.extend([
            EconomicScenario(
                pattern="low-fair-low-clear-night-balanced",
                name="üåô √Ånh TrƒÉng Th·∫ßn B√≠", 
                description="√Ånh trƒÉng s√°ng t·∫°o ra hi·ªán t∆∞·ª£ng k·ª≥ l·∫° trong n√¥ng tr·∫°i",
                triggers={"time": "night", "weather": "clear", "moon_phase": "full"},
                decision={
                    "action_type": "MYSTICAL_EVENT",
                    "reasoning": "√çt ng∆∞·ªùi ch∆°i active ban ƒë√™m, nh∆∞ng trƒÉng tr√≤n t·∫°o c∆° h·ªôi ƒë·∫∑c bi·ªát cho night owls.",
                    "confidence": 0.9,
                    "parameters": {
                        "event_name": "‚ú® Ph√©p Thu·∫≠t √Ånh TrƒÉng",
                        "description": "√Ånh trƒÉng bi·∫øn c√¢y tr·ªìng th√†nh phi√™n b·∫£n premium! +300% gi√° tr·ªã",
                        "effect_type": "transformation",
                        "transform_chance": 0.15,
                        "value_multiplier": 4.0,
                        "duration_hours": 8,
                        "night_only": True
                    },
                    "expected_impact": "Reward cho ng∆∞·ªùi ch∆°i th·ª©c khuya, t·∫°o unique experience",
                    "priority": "high"
                },
                frequency="legendary",
                season_preference=["all"],
                player_count_range=(1, 15),
                economic_health_range=(0.3, 0.8)
            ),
            
            EconomicScenario(
                pattern="medium-poor-medium-stormy-night-unbalanced",
                name="‚õàÔ∏è B√£o T·ªë Kinh Ho√†ng",
                description="C∆°n b√£o d·ªØ d·ªôi t·∫•n c√¥ng trong ƒë√™m, ƒëe d·ªça m·ªçi th·ª©",
                triggers={"time": "night", "weather": "stormy", "health": "poor"},
                decision={
                    "action_type": "CRISIS_EVENT",
                    "reasoning": "Kinh t·∫ø y·∫øu + b√£o ƒë√™m = crisis. C·∫ßn event dramatic ƒë·ªÉ test player resilience.",
                    "confidence": 0.92,
                    "parameters": {
                        "event_name": "üíÄ Th·∫£m H·ªça T·ª± Nhi√™n",
                        "description": "B√£o t·ªë ph√° h·ªßy 50% c√¢y tr·ªìng! Nh∆∞ng ai survive s·∫Ω nh·∫≠n bonus 5x",
                        "effect_type": "high_risk_high_reward",
                        "destruction_rate": 0.5,
                        "survivor_bonus": 5.0,
                        "duration_hours": 6,
                        "requires_action": True,
                        "action_type": "protect_crops"
                    },
                    "expected_impact": "T·∫°o drama v√† excitement, test player commitment",
                    "priority": "critical"
                },
                frequency="rare",
                season_preference=["autumn", "winter"],
                player_count_range=(5, 40),
                economic_health_range=(0.1, 0.6)
            )
        ])
        
        return scenarios
    
    def _create_seasonal_events(self) -> Dict[str, List[Dict]]:
        """T·∫°o events theo m√πa"""
        return {
            "spring": [
                {
                    "pattern": "any-any-any-any-spring-any",
                    "name": "üå∏ L·ªÖ H·ªôi Hoa Anh ƒê√†o",
                    "description": "M√πa xu√¢n n·ªü hoa, du kh√°ch ƒë·∫øn tham quan n√¥ng tr·∫°i",
                    "effect": "tourist_bonus",
                    "multiplier": 1.4,
                    "duration": 24
                },
                {
                    "pattern": "any-any-any-rainy-spring-any", 
                    "name": "üå± M∆∞a Ph√π Sa M√†u M·ª°",
                    "description": "M∆∞a xu√¢n mang ph√π sa, ƒë·∫•t ƒëai tr·ªü n√™n m√†u m·ª° h∆°n",
                    "effect": "soil_improvement",
                    "bonus": "permanent_yield_+10%",
                    "duration": 168  # 1 tu·∫ßn
                }
            ],
            "summer": [
                {
                    "pattern": "any-any-any-sunny-summer-any",
                    "name": "‚òÄÔ∏è Ng√†y H√® R·ª±c R·ª°",
                    "description": "N·∫Øng h√® ch√°y mang l·∫°i nƒÉng l∆∞·ª£ng t·ªëi ƒëa cho c√¢y tr·ªìng",
                    "effect": "solar_boost",
                    "growth_speed": 2.0,
                    "duration": 12
                },
                {
                    "pattern": "any-any-any-hot-summer-any",
                    "name": "üî• S√≥ng Nhi·ªát C·ª±c ƒêoan",
                    "description": "Nhi·ªát ƒë·ªô c·ª±c cao, ch·ªâ c√¢y ch·ªãu h·∫°n m·ªõi survive",
                    "effect": "heat_challenge",
                    "resistant_crops": ["cactus", "corn", "tomato"],
                    "bonus": 3.0,
                    "duration": 8
                }
            ],
            "autumn": [
                {
                    "pattern": "any-any-any-any-autumn-any",
                    "name": "üçÇ M√πa Thu V√†ng √ìng",
                    "description": "M√πa thu ƒë·∫øn, th·ªùi ƒëi·ªÉm v√†ng c·ªßa n√¥ng nghi·ªáp",
                    "effect": "harvest_festival",
                    "all_crops_bonus": 1.5,
                    "duration": 72  # 3 ng√†y
                },
                {
                    "pattern": "any-any-any-windy-autumn-any",
                    "name": "üí® Gi√≥ Thu Mang L√° V√†ng",
                    "description": "Gi√≥ thu th·ªïi bay h·∫°t gi·ªëng ƒë·∫∑c bi·ªát t·ª´ xa",
                    "effect": "seed_rain",
                    "free_rare_seeds": 5,
                    "duration": 6
                }
            ],
            "winter": [
                {
                    "pattern": "any-any-any-cold-winter-any",
                    "name": "‚ùÑÔ∏è M√πa ƒê√¥ng BƒÉng Gi√°",
                    "description": "BƒÉng tuy·∫øt ph·ªß tr·∫Øng, ch·ªâ c√¢y ch·ªãu l·∫°nh m·ªõi ph√°t tri·ªÉn",
                    "effect": "winter_survival",
                    "cold_resistant_bonus": 2.5,
                    "duration": 24
                },
                {
                    "pattern": "any-any-any-snowy-winter-any",
                    "name": "‚õÑ Tuy·∫øt R∆°i Ma Thu·∫≠t",
                    "description": "Tuy·∫øt ma thu·∫≠t l√†m ƒë·∫•t ƒëai m√†u m·ª° cho nƒÉm t·ªõi",
                    "effect": "snow_blessing",
                    "next_season_bonus": 1.2,
                    "duration": 48
                }
            ]
        }
    
    def _create_crisis_scenarios(self) -> List[Dict]:
        """T·∫°o scenarios kh·ªßng ho·∫£ng kinh t·∫ø"""
        return [
            {
                "pattern": "low-poor-any-any-any-concentrated",
                "name": "üìâ Kh·ªßng Ho·∫£ng Kinh T·∫ø",
                "description": "N·ªÅn kinh t·∫ø suy tho√°i, c·∫ßn bi·ªán ph√°p kh·∫©n c·∫•p",
                "triggers": {"health": "<0.3", "activity": "<0.3"},
                "solutions": [
                    {
                        "type": "emergency_stimulus",
                        "action": "give_all_players_money",
                        "amount": 5000,
                        "reason": "G√≥i c·ª©u tr·ª£ kh·∫©n c·∫•p t·ª´ ch√≠nh ph·ªß"
                    },
                    {
                        "type": "mega_event", 
                        "action": "super_harvest_festival",
                        "duration": 48,
                        "multiplier": 3.0
                    }
                ]
            },
            {
                "pattern": "any-poor-low-stormy-any-unbalanced",
                "name": "üå™Ô∏è Si√™u B√£o T√†n Ph√°",
                "description": "Thi√™n tai t√†n ph√° n·∫∑ng n·ªÅ, c·ªông ƒë·ªìng ph·∫£i ƒëo√†n k·∫øt",
                "triggers": {"weather": "stormy", "health": "<0.4"},
                "solutions": [
                    {
                        "type": "community_effort",
                        "action": "rebuild_together",
                        "reward": "collective_bonus",
                        "requirement": "min_participants: 10"
                    }
                ]
            }
        ]
    
    def _create_prosperity_scenarios(self) -> List[Dict]:
        """T·∫°o scenarios th·ªãnh v∆∞·ª£ng"""
        return [
            {
                "pattern": "high-good-high-sunny-any-balanced",
                "name": "üèÜ Th·ªùi ƒê·∫°i Ho√†ng Kim",
                "description": "N·ªÅn kinh t·∫ø ph√°t tri·ªÉn m·∫°nh, m·ªçi ng∆∞·ªùi ƒë·ªÅu th·ªãnh v∆∞·ª£ng",
                "triggers": {"health": ">0.8", "activity": ">0.8", "balance": "good"},
                "effects": [
                    {
                        "type": "golden_age_bonus",
                        "all_activities": 1.5,
                        "duration": 72,
                        "special_rewards": True
                    }
                ]
            },
            {
                "pattern": "high-good-medium-any-any-balanced",
                "name": "üíé Ph√°t Hi·ªán Kho B√°u",
                "description": "Ph√°t hi·ªán kho b√°u c·ªï ƒë·∫°i trong ƒë·∫•t n√¥ng tr·∫°i",
                "triggers": {"health": ">0.7", "luck_factor": ">0.9"},
                "effects": [
                    {
                        "type": "treasure_discovery",
                        "rare_items": ["diamond_seeds", "golden_tools"],
                        "coin_bonus": 50000,
                        "duration": 24
                    }
                ]
            }
        ]
    
    def _create_market_scenarios(self) -> List[Dict]:
        """T·∫°o scenarios thao t√∫ng th·ªã tr∆∞·ªùng"""
        return [
            {
                "pattern": "medium-fair-high-any-any-concentrated",
                "name": "üìà Thao T√∫ng Th·ªã Tr∆∞·ªùng",
                "description": "C√°c nh√† ƒë·∫ßu t∆∞ l·ªõn thao t√∫ng gi√° c·∫£ n√¥ng s·∫£n",
                "effects": [
                    {
                        "type": "price_manipulation",
                        "random_crop_spike": {"multiplier": "2-5x", "duration": 2},
                        "warning": "Gi√° c√≥ th·ªÉ thay ƒë·ªïi b·∫•t ng·ªù!"
                    }
                ]
            },
            {
                "pattern": "high-good-any-any-any-unbalanced",
                "name": "üöÄ B·ªçt Kinh T·∫ø",
                "description": "Th·ªã tr∆∞·ªùng qu√° s√¥i ƒë·ªông, c√≥ nguy c∆° bong b√≥ng",
                "effects": [
                    {
                        "type": "bubble_warning",
                        "temporary_super_bonus": 5.0,
                        "crash_risk": 0.3,
                        "duration": 4
                    }
                ]
            }
        ]
    
    def generate_hourly_scenarios(self, current_cache: Dict) -> Dict[str, Any]:
        """T·∫°o scenarios m·ªõi cho t·ª´ng gi·ªù"""
        current_time = datetime.now()
        hour = current_time.hour
        season = self._get_current_season()
        
        # X√°c ƒë·ªãnh time period
        if 6 <= hour < 12:
            time_period = "morning"
        elif 12 <= hour < 18:
            time_period = "afternoon" 
        elif 18 <= hour < 23:
            time_period = "evening"
        else:
            time_period = "night"
        
        # L·ªçc scenarios ph√π h·ª£p v·ªõi th·ªùi gian hi·ªán t·∫°i
        suitable_scenarios = [
            s for s in self.scenarios
            if time_period in s.pattern or "any" in s.pattern
        ]
        
        # Th√™m seasonal scenarios
        if season in self.seasonal_events:
            seasonal = self.seasonal_events[season]
            suitable_scenarios.extend([
                self._convert_seasonal_to_scenario(s) for s in seasonal
            ])
        
        # T·∫°o 10-15 scenarios m·ªõi cho gi·ªù n√†y
        new_scenarios = {}
        for _ in range(random.randint(10, 15)):
            scenario = random.choice(suitable_scenarios)
            
            # T·∫°o variations
            variation = self._create_scenario_variation(scenario, time_period, season)
            pattern_key = f"{variation['pattern']}_{random.randint(1000, 9999)}"
            
            new_scenarios[pattern_key] = {
                "decision": variation["decision"],
                "created_at": current_time.isoformat(),
                "last_used": current_time.isoformat(),
                "usage_count": 0,
                "pattern": pattern_key,
                "scenario_type": variation.get("frequency", "common"),
                "time_generated": time_period,
                "season": season
            }
        
        return new_scenarios
    
    def _get_current_season(self) -> str:
        """X√°c ƒë·ªãnh m√πa hi·ªán t·∫°i"""
        month = datetime.now().month
        if month in [12, 1, 2]:
            return "winter"
        elif month in [3, 4, 5]:
            return "spring"
        elif month in [6, 7, 8]:
            return "summer"
        else:
            return "autumn"
    
    def _convert_seasonal_to_scenario(self, seasonal_event: Dict) -> EconomicScenario:
        """Chuy·ªÉn ƒë·ªïi seasonal event th√†nh scenario"""
        return EconomicScenario(
            pattern=seasonal_event["pattern"],
            name=seasonal_event["name"],
            description=seasonal_event["description"],
            triggers={},
            decision={
                "action_type": "SEASONAL_EVENT",
                "reasoning": seasonal_event["description"],
                "confidence": 0.9,
                "parameters": seasonal_event,
                "expected_impact": "Seasonal bonus effect",
                "priority": "medium"
            },
            frequency="seasonal",
            season_preference=["all"],
            player_count_range=(1, 1000),
            economic_health_range=(0.0, 1.0)
        )
    
    def _create_scenario_variation(self, base_scenario: EconomicScenario, time_period: str, season: str) -> Dict:
        """T·∫°o variation c·ªßa scenario ƒë·ªÉ tƒÉng ƒë·ªô ƒëa d·∫°ng"""
        variation = asdict(base_scenario)
        
        # ƒêi·ªÅu ch·ªânh parameters d·ª±a tr√™n th·ªùi gian
        if time_period == "night":
            # Gi·∫£m s·ªë ng∆∞·ªùi tham gia, tƒÉng reward
            if "multiplier" in variation["decision"]["parameters"]:
                variation["decision"]["parameters"]["multiplier"] *= 1.5
            variation["decision"]["parameters"]["night_bonus"] = True
            
        elif time_period == "morning":
            # TƒÉng duration cho morning events
            if "duration_hours" in variation["decision"]["parameters"]:
                variation["decision"]["parameters"]["duration_hours"] += 2
                
        # ƒêi·ªÅu ch·ªânh theo m√πa
        seasonal_multipliers = {
            "spring": 1.2,  # M√πa sinh tr∆∞·ªüng
            "summer": 1.3,  # M√πa cao ƒëi·ªÉm
            "autumn": 1.4,  # M√πa thu ho·∫°ch
            "winter": 0.8   # M√πa kh√≥ khƒÉn
        }
        
        if "multiplier" in variation["decision"]["parameters"]:
            variation["decision"]["parameters"]["multiplier"] *= seasonal_multipliers.get(season, 1.0)
        
        # Th√™m random factor
        random_factors = [
            "lucky_charm",
            "community_spirit", 
            "innovation_bonus",
            "tradition_blessing",
            "weather_luck"
        ]
        
        variation["decision"]["parameters"]["random_factor"] = random.choice(random_factors)
        variation["decision"]["parameters"]["randomness"] = random.uniform(0.8, 1.5)
        
        return variation
    
    def create_comprehensive_cache(self) -> Dict[str, Any]:
        """T·∫°o cache ho√†n ch·ªânh v·ªõi t·∫•t c·∫£ scenarios"""
        cache_data = {
            "decisions": {},
            "stats": {
                "hits": 0,
                "misses": 0,
                "tokens_saved": 0,
                "total_scenarios": 0,
                "last_update": datetime.now().isoformat(),
                "scenario_types": {
                    "common": 0,
                    "uncommon": 0,
                    "rare": 0,
                    "legendary": 0
                }
            },
            "metadata": {
                "version": "2.0",
                "generator": "EnhancedEconomicScenarios",
                "total_patterns": 0,
                "coverage": {
                    "time_periods": ["morning", "afternoon", "evening", "night"],
                    "seasons": ["spring", "summer", "autumn", "winter"],
                    "weather_types": ["sunny", "cloudy", "rainy", "stormy", "windy", "clear"],
                    "economic_states": ["poor", "fair", "good"],
                    "activity_levels": ["low", "medium", "high"],
                    "distribution_types": ["balanced", "unbalanced", "concentrated"]
                }
            }
        }
        
        # T·∫°o scenarios cho t·∫•t c·∫£ combinations
        all_scenarios = []
        all_scenarios.extend(self.scenarios)
        
        # Th√™m seasonal events
        for season, events in self.seasonal_events.items():
            for event in events:
                all_scenarios.append(self._convert_seasonal_to_scenario(event))
        
        # Convert scenarios th√†nh cache format
        for i, scenario in enumerate(all_scenarios):
            pattern_key = f"{scenario.pattern}_{i:04d}"
            
            cache_data["decisions"][pattern_key] = {
                "decision": scenario.decision,
                "created_at": datetime.now().isoformat(),
                "last_used": datetime.now().isoformat(),
                "usage_count": 0,
                "pattern": scenario.pattern,
                "scenario_metadata": {
                    "name": scenario.name,
                    "description": scenario.description,
                    "frequency": scenario.frequency,
                    "season_preference": scenario.season_preference,
                    "player_count_range": scenario.player_count_range,
                    "economic_health_range": scenario.economic_health_range
                }
            }
            
            # Update stats
            frequency = scenario.frequency if scenario.frequency in ["common", "uncommon", "rare", "legendary"] else "common"
            cache_data["stats"]["scenario_types"][frequency] += 1
        
        cache_data["stats"]["total_scenarios"] = len(all_scenarios)
        cache_data["metadata"]["total_patterns"] = len(cache_data["decisions"])
        
        return cache_data

    def get_random_scenario_for_state(self, economic_health: float, activity: float, 
                                    weather: str, time_period: str = None) -> Dict:
        """L·∫•y scenario ng·∫´u nhi√™n ph√π h·ª£p v·ªõi state hi·ªán t·∫°i"""
        if not time_period:
            hour = datetime.now().hour
            if 6 <= hour < 12:
                time_period = "morning"
            elif 12 <= hour < 18:
                time_period = "afternoon" 
            elif 18 <= hour < 23:
                time_period = "evening"
            else:
                time_period = "night"
        
        # L·ªçc scenarios ph√π h·ª£p
        suitable = [
            s for s in self.scenarios
            if (economic_health >= s.economic_health_range[0] and 
                economic_health <= s.economic_health_range[1])
        ]
        
        if suitable:
            chosen = random.choice(suitable)
            return asdict(chosen)
        
        # Fallback scenario
        return {
            "pattern": f"dynamic-{economic_health:.1f}-{activity:.1f}-{weather}-{time_period}",
            "decision": {
                "action_type": "ADAPTIVE_RESPONSE",
                "reasoning": f"T√¨nh hu·ªëng ƒë·ªông: S·ª©c kh·ªèe kinh t·∫ø {economic_health:.1f}, ho·∫°t ƒë·ªông {activity:.1f}",
                "confidence": 0.7,
                "parameters": {
                    "adaptive": True,
                    "health_factor": economic_health,
                    "activity_factor": activity,
                    "weather_factor": weather,
                    "time_factor": time_period
                },
                "expected_impact": "ƒêi·ªÅu ch·ªânh linh ho·∫°t theo t√¨nh h√¨nh",
                "priority": "medium"
            }
        }