import discord
from discord.ext import commands
from datetime import datetime, timedelta
import random
import config
from utils.embeds import EmbedBuilder
from utils.registration import registration_required

class DailyCog(commands.Cog):
    """H·ªá th·ªëng th∆∞·ªüng h√†ng ng√†y"""
    
    def __init__(self, bot):
        self.bot = bot
    
    async def get_user_safe(self, user_id: int):
        """Get user from database (registration required)"""
        user = await self.bot.db.get_user(user_id)
        return user
    
    @commands.command(name='daily', aliases=['hangngay'])
    @registration_required
    async def daily(self, ctx):
        """Nh·∫≠n th∆∞·ªüng h√†ng ng√†y
        
        S·ª≠ d·ª•ng: f!daily
        """
        user = await self.get_user_safe(ctx.author.id)
        
        now = datetime.now()
        
        # Check if user can claim daily
        if user.last_daily:
            time_since_last = now - user.last_daily
            
            if time_since_last < timedelta(hours=20):
                # Calculate time until next daily
                next_daily = user.last_daily + timedelta(hours=20)
                time_left = next_daily - now
                hours = int(time_left.total_seconds() // 3600)
                minutes = int((time_left.total_seconds() % 3600) // 60)
                
                embed = EmbedBuilder.create_error_embed(
                    "Ch∆∞a th·ªÉ nh·∫≠n th∆∞·ªüng!",
                    f"B·∫°n ƒë√£ nh·∫≠n th∆∞·ªüng h√†ng ng√†y r·ªìi!\n"
                    f"‚è∞ C√≥ th·ªÉ nh·∫≠n l·∫°i sau: {hours}h {minutes}p"
                )
                
                await ctx.send(embed=embed)
                return
            
            # Check if streak should continue (within 48 hours)
            if time_since_last <= timedelta(hours=48):
                user.daily_streak += 1
            else:
                user.daily_streak = 1
        else:
            user.daily_streak = 1
        
        # Calculate rewards based on streak
        base_reward = config.DAILY_BASE_REWARD
        streak_bonus = min(user.daily_streak * config.DAILY_STREAK_BONUS, config.DAILY_MAX_STREAK_BONUS)
        total_reward = base_reward + streak_bonus
        
        # Random bonus chance
        bonus_chance = random.randint(1, 100)
        bonus_reward = 0
        bonus_text = ""
        
        if bonus_chance <= 10:  # 10% chance for big bonus
            bonus_reward = total_reward
            bonus_text = "üé∞ **JACKPOT!** G·∫•p ƒë√¥i ph·∫ßn th∆∞·ªüng!"
        elif bonus_chance <= 30:  # 20% chance for medium bonus
            bonus_reward = total_reward // 2
            bonus_text = "‚ú® **Lucky!** Th√™m 50% ph·∫ßn th∆∞·ªüng!"
        
        final_reward = total_reward + bonus_reward
        
        # Give rewards
        user.money += final_reward
        user.last_daily = now
        await self.bot.db.update_user(user)
        
        # Create success embed
        embed = EmbedBuilder.create_success_embed(
            "üéÅ Nh·∫≠n th∆∞·ªüng h√†ng ng√†y th√†nh c√¥ng!",
            f"üí∞ Ph·∫ßn th∆∞·ªüng: {final_reward:,} coins\n"
            f"üî• Streak: {user.daily_streak} ng√†y\n"
            f"üí∞ S·ªë d∆∞ m·ªõi: {user.money:,} coins"
        )
        
        # Reward breakdown
        embed.add_field(
            name="üìä Chi ti·∫øt ph·∫ßn th∆∞·ªüng",
            value=f"üíµ C∆° b·∫£n: {base_reward:,} coins\n"
                  f"üî• Streak bonus: {streak_bonus:,} coins\n" + 
                  (f"üé≤ Bonus may m·∫Øn: {bonus_reward:,} coins\n" if bonus_reward > 0 else ""),
            inline=False
        )
        
        if bonus_text:
            embed.add_field(name="üéâ May m·∫Øn!", value=bonus_text, inline=False)
        
        # Streak milestones
        next_milestone = ((user.daily_streak // 5) + 1) * 5
        days_to_milestone = next_milestone - user.daily_streak
        
        embed.add_field(
            name="üéØ M·ª•c ti√™u ti·∫øp theo",
            value=f"C√≤n {days_to_milestone} ng√†y ƒë·ªÉ ƒë·∫°t streak {next_milestone}!",
            inline=False
        )
        
        await ctx.send(embed=embed)
    
    @commands.command(name='streak', aliases=['chuoi'])
    @registration_required
    async def streak(self, ctx, member: discord.Member = None):
        """Xem chu·ªói th∆∞·ªüng h√†ng ng√†y
        
        S·ª≠ d·ª•ng: f!streak [@user]
        """
        target = member or ctx.author
        user = await self.get_user_safe(target.id)
        
        if member and not user:
            await ctx.send(f"‚ùå {member.display_name} ch∆∞a ƒëƒÉng k√Ω t√†i kho·∫£n n√¥ng tr·∫°i!")
            return
        
        embed = EmbedBuilder.create_base_embed(
            f"üî• Streak c·ªßa {target.display_name}",
            color=0xe67e22
        )
        
        embed.set_thumbnail(url=target.display_avatar.url)
        
        # Current streak info
        if user.daily_streak > 0:
            embed.add_field(
                name="üî• Streak hi·ªán t·∫°i",
                value=f"{user.daily_streak} ng√†y",
                inline=True
            )
            
            # Calculate next rewards
            next_base = config.DAILY_BASE_REWARD
            next_bonus = min((user.daily_streak + 1) * config.DAILY_STREAK_BONUS, config.DAILY_MAX_STREAK_BONUS)
            next_total = next_base + next_bonus
            
            embed.add_field(
                name="üí∞ Th∆∞·ªüng ng√†y mai",
                value=f"{next_total:,} coins",
                inline=True
            )
        else:
            embed.add_field(
                name="üî• Streak hi·ªán t·∫°i",
                value="0 ng√†y",
                inline=True
            )
            
            embed.add_field(
                name="üí∞ Th∆∞·ªüng ng√†y mai",
                value=f"{config.DAILY_BASE_REWARD:,} coins",
                inline=True
            )
        
        # Last claim time
        if user.last_daily:
            last_claim = user.last_daily.strftime("%d/%m/%Y %H:%M")
            embed.add_field(
                name="‚è∞ L·∫ßn cu·ªëi nh·∫≠n",
                value=last_claim,
                inline=True
            )
        
        # Streak milestones
        milestones = [5, 10, 25, 50, 100]
        achieved = [m for m in milestones if user.daily_streak >= m]
        next_milestone = next((m for m in milestones if user.daily_streak < m), None)
        
        if achieved:
            embed.add_field(
                name="üèÜ Th√†nh t√≠ch ƒë·∫°t ƒë∆∞·ª£c",
                value="‚≠ê " + ", ".join([f"{m} ng√†y" for m in achieved]),
                inline=False
            )
        
        if next_milestone:
            days_left = next_milestone - user.daily_streak
            embed.add_field(
                name="üéØ M·ª•c ti√™u ti·∫øp theo",
                value=f"Streak {next_milestone} ng√†y (c√≤n {days_left} ng√†y)",
                inline=False
            )
        else:
            embed.add_field(
                name="üéâ Ho√†n th√†nh t·∫•t c·∫£",
                value="B·∫°n ƒë√£ ƒë·∫°t t·∫•t c·∫£ m·ª•c ti√™u streak!",
                inline=False
            )
        
        # Show claim status
        now = datetime.now()
        if user.last_daily:
            time_since = now - user.last_daily
            if time_since >= timedelta(hours=20):
                embed.add_field(
                    name="‚úÖ Tr·∫°ng th√°i",
                    value="C√≥ th·ªÉ nh·∫≠n th∆∞·ªüng ngay!",
                    inline=False
                )
            else:
                next_daily = user.last_daily + timedelta(hours=20)
                time_left = next_daily - now
                hours = int(time_left.total_seconds() // 3600)
                minutes = int((time_left.total_seconds() % 3600) // 60)
                
                embed.add_field(
                    name="‚è≥ Tr·∫°ng th√°i",
                    value=f"C√≥ th·ªÉ nh·∫≠n l·∫°i sau {hours}h {minutes}p",
                    inline=False
                )
        else:
            embed.add_field(
                name="üéÅ Tr·∫°ng th√°i",
                value="Ch∆∞a t·ª´ng nh·∫≠n th∆∞·ªüng h√†ng ng√†y!",
                inline=False
            )
        
        await ctx.send(embed=embed)
    
    @commands.command(name='rewards', aliases=['thuong'])
    async def rewards_info(self, ctx):
        """Xem th√¥ng tin h·ªá th·ªëng th∆∞·ªüng h√†ng ng√†y
        
        S·ª≠ d·ª•ng: f!rewards
        """
        embed = EmbedBuilder.create_base_embed(
            "üéÅ H·ªá th·ªëng th∆∞·ªüng h√†ng ng√†y",
            "Th√¥ng tin chi ti·∫øt v·ªÅ ph·∫ßn th∆∞·ªüng",
            color=0x3498db
        )
        
        embed.add_field(
            name="üí∞ Ph·∫ßn th∆∞·ªüng c∆° b·∫£n",
            value=f"{config.DAILY_BASE_REWARD:,} coins m·ªói ng√†y",
            inline=True
        )
        
        embed.add_field(
            name="üî• Streak bonus",
            value=f"+{config.DAILY_STREAK_BONUS:,} coins/ng√†y streak\n"
                  f"(T·ªëi ƒëa +{config.DAILY_MAX_STREAK_BONUS:,} coins)",
            inline=True
        )
        
        embed.add_field(
            name="‚è∞ Th·ªùi gian",
            value="M·ªói 20 ti·∫øng c√≥ th·ªÉ nh·∫≠n 1 l·∫ßn",
            inline=True
        )
        
        # Streak examples
        example_streaks = [1, 5, 10, 25, 50]
        examples = []
        
        for streak in example_streaks:
            base = config.DAILY_BASE_REWARD
            bonus = min(streak * config.DAILY_STREAK_BONUS, config.DAILY_MAX_STREAK_BONUS)
            total = base + bonus
            examples.append(f"Ng√†y {streak}: {total:,} coins")
        
        embed.add_field(
            name="üìà V√≠ d·ª• ph·∫ßn th∆∞·ªüng",
            value="\n".join(examples),
            inline=False
        )
        
        embed.add_field(
            name="üé≤ Bonus may m·∫Øn",
            value="‚Ä¢ 10% c∆° h·ªôi g·∫•p ƒë√¥i ph·∫ßn th∆∞·ªüng (Jackpot!)\n"
                  "‚Ä¢ 20% c∆° h·ªôi th√™m 50% ph·∫ßn th∆∞·ªüng (Lucky!)\n"
                  "‚Ä¢ 70% ph·∫ßn th∆∞·ªüng b√¨nh th∆∞·ªùng",
            inline=False
        )
        
        embed.add_field(
            name="üèÜ Milestone th√†nh t√≠ch",
            value="‚≠ê 5 ng√†y | ‚≠ê 10 ng√†y | ‚≠ê 25 ng√†y | ‚≠ê 50 ng√†y | ‚≠ê 100 ng√†y",
            inline=False
        )
        
        embed.set_footer(text="üí° Tip: Nh·∫≠n th∆∞·ªüng ƒë·ªÅu ƒë·∫∑n ƒë·ªÉ duy tr√¨ streak cao!")
        
        await ctx.send(embed=embed)

async def setup(bot):
    await bot.add_cog(DailyCog(bot)) 