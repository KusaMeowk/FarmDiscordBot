import discord
from discord.ext import commands
import random
import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple
import config
from utils.embeds import EmbedBuilder
from utils.registration import registration_required
import logging

# Setup casino logger
logger = logging.getLogger('casino')

class Card:
    """Class ƒë·∫°i di·ªán cho m·ªôt l√° b√†i"""
    SUITS = ['‚ô†Ô∏è', '‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è']
    RANKS = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']
    
    def __init__(self, suit: str, rank: str):
        self.suit = suit
        self.rank = rank
        self.emoji_key = f"{rank}_{suit}"
        logger.debug(f"Created card: {self.rank} of {self.suit}, emoji_key: {self.emoji_key}")
    
    def get_value(self, ace_high: bool = False) -> int:
        """L·∫•y gi√° tr·ªã c·ªßa l√° b√†i trong Blackjack"""
        if self.rank in ['J', 'Q', 'K']:
            return 10
        elif self.rank == 'A':
            return 11 if ace_high else 1
        else:
            return int(self.rank)
    
    def get_emoji(self, bot) -> str:
        """L·∫•y emoji c·ªßa l√° b√†i t·ª´ bot - H·ªó tr·ª£ c·∫£ Application v√† Guild emojis"""
        logger.debug(f"Getting emoji for key: {self.emoji_key}")
        emoji_id = config.CARD_EMOJIS.get(self.emoji_key)
        
        if emoji_id and isinstance(emoji_id, int) and emoji_id > 0:
            logger.debug(f"Found emoji ID: {emoji_id}")
            # Try to get emoji object from Discord
            try:
                emoji_obj = bot.get_emoji(emoji_id)
                if emoji_obj:
                    logger.debug(f"Successfully got emoji object: {emoji_obj}")
                    return str(emoji_obj)
                else:
                    # For Application emojis, they might not be in bot cache
                    # Format manually for cross-guild usage
                    logger.debug(f"Using manual format for Application emoji ID: {emoji_id}")
                    # Use generic emoji name since we don't know the actual name
                    return f"<:card:{emoji_id}>"
            except Exception as e:
                logger.error(f"Error getting emoji: {e}")
        elif emoji_id and isinstance(emoji_id, str):
            # Handle string emojis like "‚¨ú"
            return emoji_id
        
        # Fallback to text representation with better formatting
        suit_symbols = {
            'spades': '‚ô†Ô∏è',
            'hearts': '‚ô•Ô∏è', 
            'diamonds': '‚ô¶Ô∏è',
            'clubs': '‚ô£Ô∏è'
        }
        
        # Enhanced text fallback with better visual
        rank_display = self.rank
        if self.rank == '10':
            rank_display = 'T'  # Shorter for better display
        
        suit_symbol = suit_symbols.get(self.suit, self.suit)
        fallback = f"`{rank_display}{suit_symbol}`"
        logger.debug(f"Using fallback text: {fallback}")
        return fallback
    
    def __str__(self):
        return f"{self.rank} of {self.suit}"

class BlackjackHand:
    """Class ƒë·∫°i di·ªán cho tay b√†i trong Blackjack"""
    def __init__(self):
        self.cards: List[Card] = []
        
    def add_card(self, card: Card):
        """Th√™m l√° b√†i v√†o tay"""
        self.cards.append(card)
    
    def get_value(self) -> int:
        """T√≠nh t·ªïng gi√° tr·ªã tay b√†i"""
        total = 0
        aces = 0
        
        for card in self.cards:
            if card.rank == 'A':
                aces += 1
                total += 11
            else:
                total += card.get_value()
        
        # X·ª≠ l√Ω Ace: Chuy·ªÉn t·ª´ 11 -> 1 n·∫øu c·∫ßn
        while total > 21 and aces > 0:
            total -= 10
            aces -= 1
            
        return total
    
    def is_blackjack(self) -> bool:
        """Ki·ªÉm tra c√≥ ph·∫£i blackjack kh√¥ng (21 v·ªõi 2 l√° ƒë·∫ßu)"""
        return len(self.cards) == 2 and self.get_value() == 21
    
    def is_bust(self) -> bool:
        """Ki·ªÉm tra c√≥ b·ªã bust kh√¥ng (> 21)"""
        return self.get_value() > 21
    
    def display_cards(self, bot, hide_first: bool = False) -> str:
        """Hi·ªÉn th·ªã c√°c l√° b√†i"""
        if not self.cards:
            return "Kh√¥ng c√≥ l√° b√†i n√†o"
        
        card_display = []
        for i, card in enumerate(self.cards):
            if hide_first and i == 0:
                # Hi·ªÉn th·ªã m·∫∑t sau cho l√° ƒë·∫ßu ti√™n c·ªßa dealer
                card_back_id = config.CARD_EMOJIS.get("card_back")
                if card_back_id and isinstance(card_back_id, int) and card_back_id > 0:
                    try:
                        emoji_obj = bot.get_emoji(card_back_id)
                        if emoji_obj:
                            card_display.append(str(emoji_obj))
                        else:
                            # For Application emojis
                            card_display.append(f"<:card_back:{card_back_id}>")
                    except Exception:
                        card_display.append("`[?]`")
                elif card_back_id and isinstance(card_back_id, str):
                    card_display.append(card_back_id)
                else:
                    card_display.append("`[?]`")
            else:
                card_display.append(card.get_emoji(bot))
        
        return " ".join(card_display)

class BlackjackGame:
    """Class ch√≠nh cho game Blackjack"""
    def __init__(self, user_id: int, bet_amount: int):
        self.user_id = user_id
        self.bet_amount = bet_amount
        self.deck = self._create_deck()
        self.player_hand = BlackjackHand()
        self.dealer_hand = BlackjackHand()
        self.game_over = False
        self.player_won = False
        self.result_message = ""
        
        # Chia b√†i ban ƒë·∫ßu
        self._deal_initial_cards()
    
    def _create_deck(self) -> List[Card]:
        """T·∫°o b·ªô b√†i 52 l√° v√† x√°o b√†i"""
        suits = ['spades', 'hearts', 'diamonds', 'clubs']
        ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
        
        deck = []
        for suit in suits:
            for rank in ranks:
                deck.append(Card(suit, rank))
        
        random.shuffle(deck)
        return deck
    
    def _deal_initial_cards(self):
        """Chia 2 l√° ƒë·∫ßu cho player v√† dealer"""
        # Player gets 2 cards face up
        self.player_hand.add_card(self.deck.pop())
        self.player_hand.add_card(self.deck.pop())
        
        # Dealer gets 2 cards (1 face down, 1 face up)
        self.dealer_hand.add_card(self.deck.pop())
        self.dealer_hand.add_card(self.deck.pop())
    
    def hit(self) -> bool:
        """Player r√∫t th√™m b√†i"""
        if self.game_over:
            return False
            
        self.player_hand.add_card(self.deck.pop())
        
        if self.player_hand.is_bust():
            self.game_over = True
            self.player_won = False
            self.result_message = "üî• **BUST!** B·∫°n ƒë√£ v∆∞·ª£t qu√° 21!"
            return False
        
        return True
    
    def stand(self):
        """Player d·ª´ng, dealer ch∆°i theo lu·∫≠t"""
        if self.game_over:
            return
        
        # Dealer ph·∫£i r√∫t b√†i ƒë·∫øn khi c√≥ √≠t nh·∫•t 17
        while self.dealer_hand.get_value() < 17:
            self.dealer_hand.add_card(self.deck.pop())
        
        self._determine_winner()
    
    def _determine_winner(self):
        """X√°c ƒë·ªãnh ng∆∞·ªùi th·∫Øng"""
        self.game_over = True
        
        player_value = self.player_hand.get_value()
        dealer_value = self.dealer_hand.get_value()
        
        # Ki·ªÉm tra blackjack
        player_blackjack = self.player_hand.is_blackjack()
        dealer_blackjack = self.dealer_hand.is_blackjack()
        
        if player_blackjack and dealer_blackjack:
            self.player_won = None  # Tie
            self.result_message = "ü§ù **HO√Ä!** C·∫£ hai ƒë·ªÅu c√≥ Blackjack!"
        elif player_blackjack:
            self.player_won = True
            self.result_message = "üéâ **BLACKJACK!** B·∫°n th·∫Øng!"
        elif dealer_blackjack:
            self.player_won = False
            self.result_message = "üò¢ **Dealer Blackjack!** B·∫°n thua!"
        elif dealer_value > 21:
            self.player_won = True
            self.result_message = "üéâ **Dealer Bust!** B·∫°n th·∫Øng!"
        elif player_value > dealer_value:
            self.player_won = True
            self.result_message = "üéâ **B·∫°n th·∫Øng!** Tay b√†i cao h∆°n!"
        elif player_value < dealer_value:
            self.player_won = False
            self.result_message = "üò¢ **B·∫°n thua!** Dealer c√≥ tay b√†i cao h∆°n!"
        else:
            self.player_won = None  # Tie
            self.result_message = "ü§ù **HO√Ä!** C√πng ƒëi·ªÉm s·ªë!"
    
    def get_winnings(self) -> int:
        """T√≠nh ti·ªÅn th·∫Øng - CH·ªà TR·∫¢ V·ªÄ TI·ªÄN TH·∫ÆNG TH√äM, KH√îNG BAO G·ªíM TI·ªÄN C∆Ø·ª¢C BAN ƒê·∫¶U"""
        if self.player_won is None:  # Tie
            return self.bet_amount  # Tr·∫£ l·∫°i ti·ªÅn c∆∞·ª£c (v√¨ ƒë√£ b·ªã tr·ª´ ·ªü ƒë·∫ßu)
        elif self.player_won:
            if self.player_hand.is_blackjack():
                # Blackjack pays 3:2 - ch·ªâ tr·∫£ th√™m 1.5x ti·ªÅn c∆∞·ª£c + ti·ªÅn c∆∞·ª£c g·ªëc
                return self.bet_amount + int(self.bet_amount * config.CASINO_CONFIG["blackjack_payout"])
            else:
                # Normal win pays 1:1 - ch·ªâ tr·∫£ th√™m 1x ti·ªÅn c∆∞·ª£c + ti·ªÅn c∆∞·ª£c g·ªëc
                return self.bet_amount * 2  # bet_amount (g·ªëc) + bet_amount (th·∫Øng)
        else:
            return 0  # Loss - kh√¥ng tr·∫£ g√¨

class BlackjackView(discord.ui.View):
    """Discord UI View cho game Blackjack"""
    
    def __init__(self, bot, game: BlackjackGame):
        super().__init__(timeout=300)
        self.bot = bot
        self.game = game
        
        # Disable buttons if game is over
        if game.game_over:
            self._disable_all_buttons()
    
    def _disable_all_buttons(self):
        """V√¥ hi·ªáu h√≥a t·∫•t c·∫£ buttons"""
        for item in self.children:
            item.disabled = True
    
    @discord.ui.button(label="üéØ Hit", style=discord.ButtonStyle.green)
    async def hit_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.game.user_id:
            await interaction.response.send_message("‚ùå ƒê√¢y kh√¥ng ph·∫£i game c·ªßa b·∫°n!", ephemeral=True)
            return
        
        if not self.game.hit():
            # Game over
            self._disable_all_buttons()
        
        embed = self._create_game_embed()
        await interaction.response.edit_message(embed=embed, view=self)
        
        # Pay out if game ended
        if self.game.game_over:
            await self._handle_game_end(interaction)
    
    @discord.ui.button(label="üõë Stand", style=discord.ButtonStyle.red)
    async def stand_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.game.user_id:
            await interaction.response.send_message("‚ùå ƒê√¢y kh√¥ng ph·∫£i game c·ªßa b·∫°n!", ephemeral=True)
            return
        
        self.game.stand()
        self._disable_all_buttons()
        
        embed = self._create_game_embed()
        await interaction.response.edit_message(embed=embed, view=self)
        await self._handle_game_end(interaction)
    
    @discord.ui.button(label="üîÑ Ch∆°i l·∫°i", style=discord.ButtonStyle.grey)
    async def play_again_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.game.user_id:
            await interaction.response.send_message("‚ùå ƒê√¢y kh√¥ng ph·∫£i game c·ªßa b·∫°n!", ephemeral=True)
            return
        
        # Start new game with same bet
        casino_cog = self.bot.get_cog('CasinoCog')
        if casino_cog:
            await interaction.response.defer()
            await casino_cog.start_blackjack_game(interaction, self.game.bet_amount)
    
    def _create_game_embed(self) -> discord.Embed:
        """T·∫°o embed hi·ªÉn th·ªã tr·∫°ng th√°i game"""
        embed = discord.Embed(
            title="üé∞ **BLACKJACK CASINO**",
            color=0x2ecc71 if not self.game.game_over else (0xe74c3c if self.game.player_won is False else 0xf39c12),
            timestamp=datetime.now()
        )
        
        # Player hand
        player_cards = self.game.player_hand.display_cards(self.bot)
        player_value = self.game.player_hand.get_value()
        embed.add_field(
            name=f"üéÆ **Tay b√†i c·ªßa b·∫°n** (T·ªïng: {player_value})",
            value=player_cards,
            inline=False
        )
        
        # Dealer hand
        if self.game.game_over:
            dealer_cards = self.game.dealer_hand.display_cards(self.bot)
            dealer_value = self.game.dealer_hand.get_value()
            embed.add_field(
                name=f"üè™ **Tay b√†i Dealer** (T·ªïng: {dealer_value})",
                value=dealer_cards,
                inline=False
            )
        else:
            dealer_cards = self.game.dealer_hand.display_cards(self.bot, hide_first=True)
            visible_value = self.game.dealer_hand.cards[1].get_value() if len(self.game.dealer_hand.cards) > 1 else 0
            embed.add_field(
                name=f"üè™ **Tay b√†i Dealer** (Hi·ªán: {visible_value}+?)",
                value=dealer_cards,
                inline=False
            )
        
        # Game info
        embed.add_field(
            name="üí∞ **Ti·ªÅn c∆∞·ª£c**",
            value=f"{self.game.bet_amount:,} coins",
            inline=True
        )
        
        if self.game.game_over:
            winnings = self.game.get_winnings()
            # T√≠nh net change: winnings - bet_amount (v√¨ ti·ªÅn ƒë√£ b·ªã tr·ª´ ·ªü ƒë·∫ßu)
            net_change = winnings - self.game.bet_amount
            
            embed.add_field(
                name="üí∏ **K·∫øt qu·∫£**",
                value=f"{net_change:+,} coins",
                inline=True
            )
            
            embed.add_field(
                name="üéØ **Tr·∫°ng th√°i**",
                value=self.game.result_message,
                inline=False
            )
        else:
            embed.add_field(
                name="üéØ **H√†nh ƒë·ªông**",
                value="Ch·ªçn **Hit** ƒë·ªÉ r√∫t th√™m b√†i ho·∫∑c **Stand** ƒë·ªÉ d·ª´ng",
                inline=False
            )
        
        embed.set_footer(text="Farm Bot Casino | Ch∆°i c√≥ tr√°ch nhi·ªám!")
        return embed
    
    async def _handle_game_end(self, interaction: discord.Interaction):
        """X·ª≠ l√Ω khi game k·∫øt th√∫c - c·∫≠p nh·∫≠t ti·ªÅn"""
        try:
            user = await self.bot.db.get_user(self.game.user_id)
            if user:
                winnings = self.game.get_winnings()
                
                # BUG FIX: update_user_money C·ªòNG TH√äM amount, kh√¥ng ph·∫£i set total
                # V·∫≠y n√™n ch·ªâ truy·ªÅn winnings (s·ªë ti·ªÅn c·∫ßn c·ªông th√™m), kh√¥ng ph·∫£i user.money
                new_total = await self.bot.db.update_user_money(user.user_id, winnings)
                
                # T√≠nh net change ƒë·ªÉ log cho r√µ r√†ng
                net_change = winnings - self.game.bet_amount
                logger.info(f"üí∞ Game end: User {self.game.user_id} bet {self.game.bet_amount}, won {winnings}, net_change: {net_change:+}, total money: {new_total}")
                
                # Update casino stats if exists
                # TODO: Implement casino stats tracking
                
        except Exception as e:
            logger.error(f"Error handling game end: {e}")
            print(f"Error handling game end: {e}")

class CasinoCog(commands.Cog):
    """H·ªá th·ªëng Casino - Blackjack v√† c√°c tr√≤ ch∆°i kh√°c"""
    
    def __init__(self, bot):
        self.bot = bot
        self.active_games: Dict[int, BlackjackGame] = {}
        self.last_played: Dict[int, datetime] = {}
        logger.info("üé∞ Casino Cog initialized")
    
    def _check_cooldown(self, user_id: int) -> Optional[float]:
        """Ki·ªÉm tra cooldown gi·ªØa c√°c game"""
        if user_id not in self.last_played:
            return None
        
        elapsed = datetime.now() - self.last_played[user_id]
        cooldown = config.CASINO_CONFIG["cooldown"]
        
        if elapsed.total_seconds() < cooldown:
            return cooldown - elapsed.total_seconds()
        
        return None
    
    @commands.command(name='blackjack', aliases=['bj'])
    @registration_required
    async def blackjack(self, ctx, bet_amount: int = None):
        """
        üé∞ Ch∆°i Blackjack t·∫°i Casino!
        
        C√°ch s·ª≠ d·ª•ng: f!bj <ti·ªÅn_c∆∞·ª£c>
        
        Lu·∫≠t ch∆°i:
        - M·ª•c ti√™u: ƒê·∫°t t·ªïng ƒëi·ªÉm g·∫ßn 21 nh·∫•t m√† kh√¥ng v∆∞·ª£t qu√°
        - A = 1 ho·∫∑c 11, J/Q/K = 10
        - Blackjack (21 v·ªõi 2 l√° ƒë·∫ßu) tr·∫£ 3:2
        - Th·∫Øng th∆∞·ªùng tr·∫£ 1:1
        """
        logger.info(f"üé≤ Blackjack command called by {ctx.author.id} with bet {bet_amount}")
        
        try:
            if bet_amount is None:
                embed = discord.Embed(
                    title="üé∞ **BLACKJACK CASINO**",
                    description="Ch∆°i Blackjack v√† th·ª≠ v·∫≠n may c·ªßa b·∫°n!",
                    color=0x3498db
                )
                embed.add_field(
                    name="üìã **C√°ch ch∆°i**",
                    value=f"S·ª≠ d·ª•ng: `{config.PREFIX}bj <ti·ªÅn_c∆∞·ª£c>`\n"
                          f"V√≠ d·ª•: `{config.PREFIX}bj 1000`",
                    inline=False
                )
                embed.add_field(
                    name="üéØ **M·ª•c ti√™u**",
                    value="ƒê·∫°t t·ªïng ƒëi·ªÉm g·∫ßn 21 nh·∫•t m√† kh√¥ng v∆∞·ª£t qu√°",
                    inline=False
                )
                embed.add_field(
                    name="üÉè **Gi√° tr·ªã b√†i**",
                    value="‚Ä¢ A = 1 ho·∫∑c 11\n‚Ä¢ J, Q, K = 10\n‚Ä¢ C√°c s·ªë = gi√° tr·ªã th·ª±c",
                    inline=True
                )
                embed.add_field(
                    name="üí∞ **T·ª∑ l·ªá tr·∫£**",
                    value="‚Ä¢ Blackjack: 3:2\n‚Ä¢ Th·∫Øng th∆∞·ªùng: 1:1\n‚Ä¢ H√≤a: Tr·∫£ l·∫°i ti·ªÅn c∆∞·ª£c",
                    inline=True
                )
                embed.add_field(
                    name="üí∏ **Gi·ªõi h·∫°n c∆∞·ª£c**",
                    value=f"T·ªëi thi·ªÉu: {config.CASINO_CONFIG['min_bet']:,} coins\n"
                          f"T·ªëi ƒëa: {config.CASINO_CONFIG['max_bet']:,} coins",
                    inline=False
                )
                
                embed.set_footer(text="Ch∆°i c√≥ tr√°ch nhi·ªám!")
                await ctx.send(embed=embed)
                logger.debug(f"‚ùå No bet amount provided by {ctx.author.id}")
                return
            
            # Ensure bet_amount is integer before passing
            try:
                bet_amount = int(bet_amount)
            except (ValueError, TypeError):
                embed = EmbedBuilder.create_error_embed(
                    "‚ùå L·ªói Input", 
                    "S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l√† m·ªôt s·ªë nguy√™n!"
                )
                await ctx.send(embed=embed)
                return
                
            await self.start_blackjack_game(ctx, bet_amount)
            
        except Exception as e:
            logger.error(f"‚ùå Error in blackjack command: {e}")
            import traceback
            traceback.print_exc()
            
            embed = EmbedBuilder.create_error_embed(
                "‚ùå L·ªói Casino",
                f"C√≥ l·ªói x·∫£y ra khi ch∆°i Blackjack: {str(e)}"
            )
            await ctx.send(embed=embed)
    
    async def start_blackjack_game(self, ctx_or_interaction, bet_amount: int):
        """B·∫Øt ƒë·∫ßu game Blackjack m·ªõi"""
        # Handle both ctx and interaction
        if hasattr(ctx_or_interaction, 'response'):
            # This is an interaction
            user = ctx_or_interaction.user
            send_func = ctx_or_interaction.followup.send
        else:
            # This is a context
            user = ctx_or_interaction.author
            send_func = ctx_or_interaction.send
        
        # Validation
        user_data = await self.bot.db.get_user(user.id)
        if not user_data:
            await send_func("‚ùå B·∫°n c·∫ßn ƒëƒÉng k√Ω t√†i kho·∫£n tr∆∞·ªõc! S·ª≠ d·ª•ng `f!register`")
            return
        
        # Check cooldown
        cooldown_remaining = self._check_cooldown(user.id)
        if cooldown_remaining:
            await send_func(f"‚è∞ B·∫°n c·∫ßn ch·ªù {cooldown_remaining:.1f}s tr∆∞·ªõc khi ch∆°i ti·∫øp!")
            return
        
        # Ensure bet_amount is integer
        try:
            bet_amount = int(bet_amount)
        except (ValueError, TypeError):
            await send_func("‚ùå S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l√† m·ªôt s·ªë nguy√™n!")
            return
        
        # Validate bet amount
        if bet_amount < config.CASINO_CONFIG["min_bet"]:
            await send_func(f"‚ùå S·ªë ti·ªÅn c∆∞·ª£c t·ªëi thi·ªÉu l√† {config.CASINO_CONFIG['min_bet']:,} coins!")
            return
        
        if bet_amount > config.CASINO_CONFIG["max_bet"]:
            await send_func(f"‚ùå S·ªë ti·ªÅn c∆∞·ª£c t·ªëi ƒëa l√† {config.CASINO_CONFIG['max_bet']:,} coins!")
            return
        
        if bet_amount > user_data.money:
            await send_func(f"‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! B·∫°n c√≥ {user_data.money:,} coins.")
            return
        
        # Deduct bet amount immediately
        user_data.money -= bet_amount
        await self.bot.db.update_user_money(user.id, user_data.money)
        
        # Create new game
        game = BlackjackGame(user.id, bet_amount)
        self.active_games[user.id] = game
        self.last_played[user.id] = datetime.now()
        
        # Create view and embed
        view = BlackjackView(self.bot, game)
        embed = view._create_game_embed()
        
        await send_func(embed=embed, view=view)
        
        # Check for immediate blackjack
        if game.player_hand.is_blackjack():
            game.stand()  # Auto-stand on blackjack
            view._disable_all_buttons()
            
            # Update the message
            updated_embed = view._create_game_embed()
            if hasattr(ctx_or_interaction, 'response'):
                # For interactions, edit the followup message
                pass  # The message was already sent above
            else:
                # For regular context, edit the last message
                pass
            
            await view._handle_game_end(ctx_or_interaction if hasattr(ctx_or_interaction, 'response') else None)

    async def cog_load(self):
        """Called when the cog is loaded"""
        logger.info("üé∞ Casino Cog loaded successfully")
    
    async def cog_unload(self):
        """Called when the cog is unloaded"""
        logger.info("üé∞ Casino Cog unloaded")

async def setup(bot):
    """Setup function ƒë·ªÉ load cog"""
    logger.info("üé∞ Setting up Casino Cog...")
    try:
        await bot.add_cog(CasinoCog(bot))
        logger.info("‚úÖ Casino Cog setup completed successfully")
    except Exception as e:
        logger.error(f"‚ùå Failed to setup Casino Cog: {e}")
        raise 