import discord
from discord.ext import commands
from discord import app_commands
import uuid
import random
import json
import aiosqlite
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any, Tuple

from database.database import Database
from utils.embeds import EmbedBuilder
from utils.registration import require_registration
from utils.enhanced_logging import get_bot_logger

# Import t·ª´ maid config backup
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from features.maid_config_backup import (
    LIMITED_BANNER_CONFIG, LIMITED_RARITY_CONFIG, MAID_TEMPLATES, BUFF_TYPES,
    get_random_maid_limited_banner, is_limited_banner_active, get_limited_banner_info,
    get_featured_characters, generate_random_buffs, STARDUST_CONFIG
)

logger = get_bot_logger()

class LimitedBannerSystem(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = bot.db
    
    async def cog_load(self):
        """Kh·ªüi t·∫°o khi load cog"""
        logger.info("LimitedBannerSystem cog loaded")
        # T·∫≠n d·ª•ng tables t·ª´ maid_system_v2
    
    async def get_db_connection(self):
        """Get database connection safely"""
        if not hasattr(self.bot, 'db') or not self.bot.db:
            raise Exception("Database not available")
        return await self.bot.db.get_connection()
    
    @commands.hybrid_command(name="2mg", description="üåü Limited Banner - Roll 1 l·∫ßn (12,000 coins)")
    async def limited_gacha_single(self, ctx):
        """Limited banner single gacha"""
        # Check registration
        if not await require_registration(ctx.bot, ctx):
            return
            
        # Check n·∫øu multi-banner active
        from features.maid_config_backup import ACTIVE_BANNER_CONFIG
        if not ACTIVE_BANNER_CONFIG["enabled"]:
            embed = EmbedBuilder.create_base_embed(
                title="‚ùå Banner kh√¥ng active",
                description="Hi·ªán kh√¥ng c√≥ banner n√†o ƒëang ho·∫°t ƒë·ªông!\nH√£y d√πng `f!mg` cho gacha th∆∞·ªùng.",
                color=0xFF0000
            )
            await ctx.send(embed=embed)
            return
            
        user_id = ctx.author.id
        cost = LIMITED_BANNER_CONFIG["single_roll_cost"]
        
        # Check coins
        user = await self.db.get_user(user_id)
        if user.money < cost:
            embed = EmbedBuilder.create_base_embed(
                title="‚ùå Kh√¥ng ƒë·ªß coins",
                description=f"B·∫°n c·∫ßn {cost:,} coins ƒë·ªÉ roll Limited Banner!\nB·∫°n hi·ªán c√≥: {user.money:,} coins",
                color=0xFF0000
            )
            await ctx.send(embed=embed)
            return
        
        # üõ°Ô∏è SAFETY: Atomic transaction for limited gacha
        connection = await self.get_db_connection()
        try:
            await connection.execute('BEGIN TRANSACTION')
            
            # Double-check coins and deduct atomically
            cursor = await connection.execute(
                'UPDATE users SET money = money - ? WHERE user_id = ? AND money >= ?',
                (cost, user_id, cost)
            )
            
            if cursor.rowcount == 0:
                await connection.execute('ROLLBACK')
                embed = EmbedBuilder.create_base_embed(
                    title="‚ùå Kh√¥ng ƒë·ªß coins",
                    description="Kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ th·ª±c hi·ªán Limited Banner gacha!",
                    color=0xFF0000
                )
                await ctx.send(embed=embed)
                return
            
            # Multi-banner gacha roll (after successful payment)
            from features.maid_config_backup import get_random_maid_multi_banner
            maid_id = get_random_maid_multi_banner()
            instance_id = str(uuid.uuid4())
            buffs = generate_random_buffs(maid_id)
            
            # Save maid to database (same table as regular gacha)
            await connection.execute('''
                INSERT INTO user_maids_v2 (user_id, maid_id, instance_id, obtained_at, buff_values)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, maid_id, instance_id, datetime.now().isoformat(), json.dumps(buffs)))
            
            # Save limited gacha history
            await connection.execute('''
                INSERT INTO gacha_history_v2 (user_id, roll_type, cost, results, created_at)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, "limited_single", cost, json.dumps([maid_id]), datetime.now().isoformat()))
            
            # üõ°Ô∏è COMMIT: All operations successful
            await connection.commit()
            
        except Exception as e:
            # üõ°Ô∏è ROLLBACK: Any error rolls back entire transaction
            await connection.execute('ROLLBACK')
            logger.error(f"Limited gacha transaction failed for user {user_id}: {e}")
            embed = EmbedBuilder.create_base_embed(
                title="‚ùå L·ªói Limited Banner gacha",
                description="ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh gacha. Ti·ªÅn c·ªßa b·∫°n kh√¥ng b·ªã tr·ª´.",
                color=0xFF0000
            )
            await ctx.send(embed=embed)
            return
        
        # Create result embed with LIMITED styling
        template = MAID_TEMPLATES[maid_id]
        featured_chars = get_featured_characters()
        is_featured = maid_id in featured_chars
        is_limited_only = template.get("limited_only", False)
        
        # Special color for limited banner
        embed_color = LIMITED_BANNER_CONFIG["background_color"]
        if is_limited_only:
            embed_color = 0xFF1493  # Hot pink for limited-only
        
        embed = EmbedBuilder.create_base_embed(
            title="üåü LIMITED BANNER RESULT!",
            description=f"**{LIMITED_BANNER_CONFIG['banner_name']}**\nChi ph√≠: {cost:,} coins",
            color=embed_color
        )
        
        # Maid info with special LIMITED badges
        rarity_emoji = {"GR": "üëª", "UR": "üíé", "SSR": "üåü", "SR": "‚≠ê", "R": "‚ú®"}[template["rarity"]]
        name_display = template["name"]
        
        badges = []
        if is_limited_only:
            badges.append("üåü **LIMITED**")
        if is_featured:
            badges.append("‚≠ê **FEATURED**")
        
        badge_text = " ".join(badges) if badges else ""
        
        embed.add_field(
            name=f"{rarity_emoji} {template['emoji']} {name_display} {badge_text}",
            value=f"**{template['rarity']} Maid** | {template.get('series', 'Unknown')}",
            inline=False
        )
        
        # Buffs
        buff_text = "\n".join([
            f"{BUFF_TYPES[buff['buff_type']]['emoji']} {BUFF_TYPES[buff['buff_type']]['name']}: +{buff['value']}%"
            for buff in buffs
        ])
        
        embed.add_field(name="‚ú® Buffs", value=buff_text, inline=False)
        embed.add_field(name="üÜî Instance ID", value=f"`{instance_id[:8]}`", inline=True)
        
        # Add limited banner footer
        embed.set_footer(text="üåü Limited Banner Event | f!2mg10 cho 10-roll")
        
        await ctx.send(embed=embed)
    
    @commands.hybrid_command(name="2mg10", description="üåü Limited Banner - Roll 10 l·∫ßn (108,000 coins)")
    async def limited_gacha_ten(self, ctx):
        """Limited banner 10-roll gacha"""
        # Check registration
        if not await require_registration(ctx.bot, ctx):
            return
            
        # Check n·∫øu multi-banner active
        from features.maid_config_backup import ACTIVE_BANNER_CONFIG
        if not ACTIVE_BANNER_CONFIG["enabled"]:
            embed = EmbedBuilder.create_base_embed(
                title="‚ùå Banner kh√¥ng active",
                description="Hi·ªán kh√¥ng c√≥ banner n√†o ƒëang ho·∫°t ƒë·ªông!\nH√£y d√πng `f!mg10` cho gacha th∆∞·ªùng.",
                color=0xFF0000
            )
            await ctx.send(embed=embed)
            return
            
        user_id = ctx.author.id
        cost = LIMITED_BANNER_CONFIG["ten_roll_cost"]
        
        # Check coins
        user = await self.db.get_user(user_id)
        if user.money < cost:
            embed = EmbedBuilder.create_base_embed(
                title="‚ùå Kh√¥ng ƒë·ªß coins",
                description=f"B·∫°n c·∫ßn {cost:,} coins ƒë·ªÉ roll Limited Banner 10 l·∫ßn!\nB·∫°n hi·ªán c√≥: {user.money:,} coins",
                color=0xFF0000
            )
            await ctx.send(embed=embed)
            return
        
        # üõ°Ô∏è SAFETY: Atomic transaction for 10-roll limited gacha
        connection = await self.get_db_connection()
        try:
            await connection.execute('BEGIN TRANSACTION')
            
            # Double-check coins and deduct atomically
            cursor = await connection.execute(
                'UPDATE users SET money = money - ? WHERE user_id = ? AND money >= ?',
                (cost, user_id, cost)
            )
            
            if cursor.rowcount == 0:
                await connection.execute('ROLLBACK')
                embed = EmbedBuilder.create_base_embed(
                    title="‚ùå Kh√¥ng ƒë·ªß coins",
                    description="Kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ th·ª±c hi·ªán Limited Banner 10-roll!",
                    color=0xFF0000
                )
                await ctx.send(embed=embed)
                return
            
            # Roll 10 times (after successful payment)
            from features.maid_config_backup import get_random_maid_multi_banner
            results = []
            for _ in range(10):
                maid_id = get_random_maid_multi_banner()
                instance_id = str(uuid.uuid4())
                buffs = generate_random_buffs(maid_id)
                
                # Save to database
                await connection.execute('''
                    INSERT INTO user_maids_v2 (user_id, maid_id, instance_id, obtained_at, buff_values)
                    VALUES (?, ?, ?, ?, ?)
                ''', (user_id, maid_id, instance_id, datetime.now().isoformat(), json.dumps(buffs)))
                
                results.append({
                    "maid_id": maid_id,
                    "instance_id": instance_id,
                    "buffs": buffs
                })
            
            # Save limited gacha history
            await connection.execute('''
                INSERT INTO gacha_history_v2 (user_id, roll_type, cost, results, created_at)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, "limited_ten_roll", cost, json.dumps([r["maid_id"] for r in results]), datetime.now().isoformat()))
            
            # üõ°Ô∏è COMMIT: All operations successful
            await connection.commit()
            
        except Exception as e:
            # üõ°Ô∏è ROLLBACK: Any error rolls back entire transaction
            await connection.execute('ROLLBACK')
            logger.error(f"Limited 10-roll gacha transaction failed for user {user_id}: {e}")
            embed = EmbedBuilder.create_base_embed(
                title="‚ùå L·ªói Limited Banner gacha",
                description="ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh gacha 10 l·∫ßn. Ti·ªÅn c·ªßa b·∫°n kh√¥ng b·ªã tr·ª´.",
                color=0xFF0000
            )
            await ctx.send(embed=embed)
            return
        
        # Send results with view
        view = LimitedGachaResultsView(user_id, results)
        embed = view.create_embed(show_remaining=False)
        await ctx.send(embed=embed, view=view)
    
    @commands.hybrid_command(name="2mbanner", description="‚ÑπÔ∏è Xem th√¥ng tin Banner hi·ªán t·∫°i")
    async def limited_banner_info(self, ctx):
        """Hi·ªÉn th·ªã th√¥ng tin multi-banner"""
        from features.maid_config_backup import (
            get_current_banner, get_banner_info, 
            ACTIVE_BANNER_CONFIG
        )
        
        if not ACTIVE_BANNER_CONFIG["enabled"]:
            embed = EmbedBuilder.create_base_embed(
                title="‚ùå Kh√¥ng c√≥ banner n√†o active",
                description="Hi·ªán t·∫°i kh√¥ng c√≥ banner n√†o ƒëang ho·∫°t ƒë·ªông.\n"
                           "Admin c√≥ th·ªÉ s·ª≠ d·ª•ng `f!banner set <banner_id>` ƒë·ªÉ b·∫≠t banner.",
                color=0xFF0000
            )
            await ctx.send(embed=embed)
            return
        
        current_banner = get_current_banner()
        banner_info = get_banner_info(current_banner)
        
        if not banner_info["enabled"]:
            embed = EmbedBuilder.create_base_embed(
                title="‚ùå Banner kh√¥ng active",
                description="Hi·ªán t·∫°i kh√¥ng c√≥ banner n√†o ƒëang di·ªÖn ra.\n\nAdmin c√≥ th·ªÉ b·∫≠t b·∫±ng `f!banner set <banner_id>`",
                color=0x808080
            )
            await ctx.send(embed=embed)
            return
        
        embed = EmbedBuilder.create_base_embed(
            title=f"üåü {banner_info['banner_name']}",
            description=banner_info["description"],
            color=banner_info["background_color"]
        )
        
        # Featured character (single featured per banner)
        featured_char = banner_info["featured_character"]
        if featured_char and featured_char in MAID_TEMPLATES:
            template = MAID_TEMPLATES[featured_char]
            rarity_emoji = {"GR": "üëª", "UR": "üíé", "SSR": "üåü", "SR": "‚≠ê", "R": "‚ú®"}[template["rarity"]]
            limited_badge = "üåü **LIMITED**" if template.get("limited_only", False) else ""
            
            embed.add_field(
                name="‚≠ê Featured Character (EXCLUSIVE)",
                value=f"{rarity_emoji} {template['emoji']} {template['name']} {limited_badge}",
                inline=False
            )
        
        # Rates comparison
        embed.add_field(
            name="üìä Gacha Rates",
            value=f"üëª **GR**: 0.05% (EXCLUSIVE!)\n"
                  f"üíé **UR**: 0.15% (vs 0.1% th∆∞·ªùng)\n"
                  f"üåü **SSR**: 7.9% (vs 5.9% th∆∞·ªùng)\n" 
                  f"‚≠ê **SR**: 22.1% (vs 24.0% th∆∞·ªùng)\n"
                  f"‚ú® **R**: 69.8% (vs 70.0% th∆∞·ªùng)",
            inline=True
        )
        
        # Costs
        embed.add_field(
            name="üí∞ Chi ph√≠",
            value=f"Single: {banner_info['single_cost']:,} coins\n"
                  f"10-roll: {banner_info['ten_cost']:,} coins",
            inline=True
        )
        
        # Commands
        embed.add_field(
            name="üéÆ Commands",
            value="`f!2mg` - Single roll\n"
                  "`f!2mg10` - 10-roll\n"
                  "`f!2mbanner` - Banner info",
            inline=False
        )
        
        embed.set_footer(text=f"üåü {banner_info['theme_emoji']} Banner Active! Roll now!")
        
        await ctx.send(embed=embed)

class LimitedGachaResultsView(discord.ui.View):
    """View cho limited gacha x10 results v·ªõi LIMITED styling"""
    
    def __init__(self, user_id: int, results: List[Dict]):
        super().__init__(timeout=300)  # 5 minutes timeout
        self.user_id = user_id
        self.results = results
        self.showing_remaining = False
        
        # Only show button if there are more than 5 results
        if len(results) > 5:
            self.update_button()
    
    def update_button(self):
        """Update button state"""
        self.clear_items()
        
        if len(self.results) > 5:
            if self.showing_remaining:
                button = discord.ui.Button(
                    label="üìã Hi·ªán 5 maid ƒë·∫ßu",
                    style=discord.ButtonStyle.secondary,
                    emoji="üìã"
                )
                button.callback = self.show_first_five
            else:
                button = discord.ui.Button(
                    label=f"üëÅÔ∏è Hi·ªán {len(self.results) - 5} maid c√≤n l·∫°i",
                    style=discord.ButtonStyle.primary,
                    emoji="üëÅÔ∏è"
                )
                button.callback = self.show_remaining
            
            self.add_item(button)
    
    def create_embed(self, show_remaining: bool = False) -> discord.Embed:
        """T·∫°o embed cho limited gacha results"""
        self.showing_remaining = show_remaining
        
        # Create result embed with banner styling
        from features.maid_config_backup import get_current_banner, get_banner_info
        current_banner = get_current_banner()
        banner_info = get_banner_info(current_banner)
        
        embed = EmbedBuilder.create_base_embed(
            title=f"üåü {banner_info['theme_emoji']} BANNER x10 RESULTS!",
            description=f"**{banner_info['banner_name']}**\nChi ph√≠: {banner_info['ten_cost']:,} coins ‚Ä¢ Ti·∫øt ki·ªám: {banner_info['single_cost'] * 10 - banner_info['ten_cost']:,} coins",
            color=banner_info["background_color"]
        )
        
        # Count by rarity v√† special types
        rarity_count = {"GR": 0, "UR": 0, "SSR": 0, "SR": 0, "R": 0}
        limited_count = 0
        featured_count = 0
        featured_char = banner_info["featured_character"]
        
        for result in self.results:
            template = MAID_TEMPLATES[result["maid_id"]]
            rarity_count[template["rarity"]] += 1
            
            if template.get("limited_only", False):
                limited_count += 1
            if result["maid_id"] == featured_char:
                featured_count += 1
        
        # Summary ch·ªâ hi·ªán rarity counts
        summary_parts = []
        for rarity in ["GR", "UR", "SSR", "SR", "R"]:
            if rarity_count[rarity] > 0:
                rarity_emoji = {"GR": "üëª", "UR": "üíé", "SSR": "üåü", "SR": "‚≠ê", "R": "‚ú®"}[rarity]
                summary_parts.append(f"{rarity_emoji} {rarity}: {rarity_count[rarity]}x")
        
        embed.add_field(name="üìä T·ªïng k·∫øt", value=" ‚Ä¢ ".join(summary_parts), inline=False)
        
        # Show maids based on current state
        if show_remaining and len(self.results) > 5:
            # Show maids 6-10
            maids_to_show = self.results[5:]
            start_index = 6
        else:
            # Show first 5 maids
            maids_to_show = self.results[:5]
            start_index = 1
        
        for i, result in enumerate(maids_to_show):
            template = MAID_TEMPLATES[result["maid_id"]]
            rarity_emoji = {"GR": "üëª", "UR": "üíé", "SSR": "üåü", "SR": "‚≠ê", "R": "‚ú®"}[template["rarity"]]
            
            # Special badges
            badges = []
            if template.get("limited_only", False):
                badges.append("üåü")
            if result["maid_id"] == featured_char:
                badges.append("‚≠ê")
            
            badge_text = "".join(badges) + " " if badges else ""
            
            buff_summary = " ‚Ä¢ ".join([f"{BUFF_TYPES[buff['buff_type']]['emoji']}{buff['value']:.1f}%" for buff in result["buffs"]])
            
            embed.add_field(
                name=f"{start_index + i}. {badge_text}{rarity_emoji} {template['emoji']} {template['name']}",
                value=f"`{result['instance_id'][:8]}` ‚Ä¢ {buff_summary}",
                inline=False
            )
        
        # Show status if not showing all
        if not show_remaining and len(self.results) > 5:
            embed.add_field(name="...", value=f"V√† {len(self.results) - 5} maids kh√°c", inline=False)
        
        embed.set_footer(text=f"üåü {banner_info['theme_emoji']} Banner Event Results")
        return embed
    
    async def show_remaining(self, interaction: discord.Interaction):
        """Hi·ªán 5 maid c√≤n l·∫°i"""
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Ch·ªâ ng∆∞·ªùi gacha m·ªõi c√≥ th·ªÉ xem!", ephemeral=True)
            return
        
        self.update_button()
        embed = self.create_embed(show_remaining=True)
        await interaction.response.edit_message(embed=embed, view=self)
    
    async def show_first_five(self, interaction: discord.Interaction):
        """Quay l·∫°i hi·ªán 5 maid ƒë·∫ßu"""
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Ch·ªâ ng∆∞·ªùi gacha m·ªõi c√≥ th·ªÉ xem!", ephemeral=True)
            return
        
        self.update_button()
        embed = self.create_embed(show_remaining=False)
        await interaction.response.edit_message(embed=embed, view=self)
    
    async def on_timeout(self):
        """Disable button when timeout"""
        for item in self.children:
            item.disabled = True

async def setup(bot):
    await bot.add_cog(LimitedBannerSystem(bot)) 