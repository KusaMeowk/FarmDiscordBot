import discord
from discord.ext import commands
import config
from utils.embeds import EmbedBuilder
from utils.helpers import calculate_land_expansion_cost
from utils.registration import registration_required
from features.maid_helper import maid_helper
from features.maid_display_integration import add_maid_buffs_to_embed

class ShopView(discord.ui.View):
    """View v·ªõi c√°c n√∫t b·∫•m cho c·ª≠a h√†ng"""
    
    def __init__(self, bot, user_id):
        super().__init__(timeout=300)
        self.bot = bot
        self.user_id = user_id
    
    @discord.ui.button(label="üå± H·∫°t gi·ªëng", style=discord.ButtonStyle.green)
    async def seeds_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            if interaction.user.id != self.user_id:
                await interaction.response.send_message("‚ùå B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
                return
            
            # Get event modifier for seed costs
            events_cog = self.bot.get_cog('EventsCog')
            cost_modifier = 1.0
            event_note = ""
            
            if events_cog and hasattr(events_cog, 'get_current_seed_cost_modifier'):
                cost_modifier = events_cog.get_current_seed_cost_modifier()
                
                if cost_modifier < 1.0:
                    discount_percent = (1.0 - cost_modifier) * 100
                    event_note = f"üåü **Gi·∫£m gi√° s·ª± ki·ªán: -{discount_percent:.0f}%**\n"
                elif cost_modifier > 1.0:
                    increase_percent = (cost_modifier - 1.0) * 100
                    event_note = f"üí∏ **TƒÉng gi√° s·ª± ki·ªán: +{increase_percent:.0f}%**\n"
            
            # Create seeds shop embed
            embed_title = "üå± C·ª≠a h√†ng H·∫°t gi·ªëng"
            if event_note:
                embed_title += " (C√≥ s·ª± ki·ªán!)"
                
            embed = EmbedBuilder.create_base_embed(embed_title, color=0x2ecc71)
            
            # Add maid buffs to seed shop
            embed = add_maid_buffs_to_embed(embed, self.user_id, "shop")
            
            if event_note:
                embed.description = event_note
            
            # Split crops into groups to avoid Discord embed limits
            basic_seeds = []
            premium_seeds = []
            
            for crop_id, crop_data in config.CROPS.items():
                growth_time = crop_data['growth_time'] // 60  # Convert to minutes
                base_price = crop_data['price']
                event_price = int(base_price * cost_modifier)
                
                # üéÄ Apply maid seed discount buff to displayed price
                from features.maid_helper import maid_helper
                final_price = maid_helper.apply_seed_discount_buff(self.user_id, event_price)
                
                # üîç Debug logging
                if final_price != base_price:
                    print(f"üéÄ Maid buff applied: {crop_id} {base_price} -> {final_price} coins (user: {self.user_id})")
                profit = crop_data['sell_price'] - final_price  # Profit with all modifiers
                
                price_display = f"{final_price:,} coins"
                if final_price != base_price:
                    price_display += f" ~~{base_price:,}~~"
                
                seed_info = (
                    f"**{crop_data['name']}**\n"
                    f"üí∞ Gi√°: {price_display} | ‚è∞ {growth_time}p\n"
                    f"üíé B√°n: {crop_data['sell_price']:,} coins | üìà L·ª£i: {profit:,}\n"
                    f"`f!buy {crop_id} <s·ªë_l∆∞·ª£ng>`"
                )
                
                if crop_data['price'] <= 100:  # Basic crops
                    basic_seeds.append(seed_info)
                else:  # Premium crops
                    premium_seeds.append(seed_info)
            
            # Add basic seeds field
            if basic_seeds:
                embed.add_field(
                    name="üå± H·∫°t gi·ªëng c∆° b·∫£n",
                    value="\n\n".join(basic_seeds),
                    inline=False
                )
            
            # Add premium seeds fields (split if needed)
            if premium_seeds:
                # Check if we need to split premium seeds
                all_premium_text = "\n\n".join(premium_seeds)
                if len(all_premium_text) > 1000:  # Discord field limit is 1024
                    # Split into multiple fields
                    mid_point = len(premium_seeds) // 2
                    
                    embed.add_field(
                        name="‚ú® H·∫°t gi·ªëng cao c·∫•p (Ph·∫ßn 1)",
                        value="\n\n".join(premium_seeds[:mid_point]),
                        inline=False
                    )
                    
                    embed.add_field(
                        name="‚ú® H·∫°t gi·ªëng cao c·∫•p (Ph·∫ßn 2)",
                        value="\n\n".join(premium_seeds[mid_point:]),
                        inline=False
                    )
                else:
                    embed.add_field(
                        name="‚ú® H·∫°t gi·ªëng cao c·∫•p",
                        value=all_premium_text,
                        inline=False
                    )
            
            embed.add_field(
                name="üí° Tip",
                value="C√°c lo·∫°i c√¢y cao c·∫•p c√≥ l·ª£i nhu·∫≠n v√† th·ªùi gian ph√°t tri·ªÉn kh√°c nhau. Ch·ªçn theo chi·∫øn l∆∞·ª£c c·ªßa b·∫°n!",
                inline=False
            )
            
            await interaction.response.edit_message(embed=embed, view=self)
            
        except Exception as e:
            print(f"Shop seeds button error: {e}")
            try:
                await interaction.response.send_message("‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i!", ephemeral=True)
            except:
                pass
    
    @discord.ui.button(label="üèûÔ∏è M·ªü r·ªông ƒë·∫•t", style=discord.ButtonStyle.blurple)
    async def land_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            if interaction.user.id != self.user_id:
                await interaction.response.send_message("‚ùå B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
                return
            
            user = await self.bot.db.get_user(self.user_id)
            if not user:
                await interaction.response.send_message("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng!", ephemeral=True)
                return
                
            expansion_cost = calculate_land_expansion_cost(user.land_slots)
            
            embed = EmbedBuilder.create_base_embed("üèûÔ∏è M·ªü r·ªông ƒë·∫•t ƒëai", color=0x3498db)
            
            embed.add_field(
                name="üìä Th√¥ng tin hi·ªán t·∫°i",
                value=f"üèûÔ∏è √î ƒë·∫•t hi·ªán c√≥: {user.land_slots}\nüí∞ S·ªë d∆∞: {user.money:,} coins",
                inline=False
            )
            
            if expansion_cost is None:
                embed.add_field(
                    name="üèÜ ƒê√£ ƒë·∫°t t·ªëi ƒëa",
                    value="B·∫°n ƒë√£ m·ªü r·ªông h·∫øt m·ª©c c√≥ th·ªÉ!",
                    inline=False
                )
            else:
                embed.add_field(
                    name="üí∞ Chi ph√≠ m·ªü r·ªông",
                    value=f"{expansion_cost:,} coins (+1 √¥ ƒë·∫•t)",
                    inline=False
                )
                
                if user.money >= expansion_cost:
                    embed.add_field(
                        name="‚úÖ C√≥ th·ªÉ mua",
                        value=f"S·ª≠ d·ª•ng `f!buy land` ƒë·ªÉ m·ªü r·ªông",
                        inline=False
                    )
                else:
                    needed = expansion_cost - user.money
                    embed.add_field(
                        name="‚ùå Kh√¥ng ƒë·ªß ti·ªÅn",
                        value=f"C·∫ßn th√™m {needed:,} coins",
                        inline=False
                    )
            
            await interaction.response.edit_message(embed=embed, view=self)
            
        except Exception as e:
            print(f"Shop land button error: {e}")
            try:
                await interaction.response.send_message("‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i!", ephemeral=True)
            except:
                pass
    
    @discord.ui.button(label="üêü C√°", style=discord.ButtonStyle.secondary)
    async def fish_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            if interaction.user.id != self.user_id:
                await interaction.response.send_message("‚ùå B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
                return
            
            # Create fish shop embed
            embed = EmbedBuilder.create_base_embed("üêü C·ª≠a h√†ng C√°", color=0x1e90ff)
            embed.description = "Ch·ªçn lo·∫°i c√° ƒë·ªÉ nu√¥i trong ao c·ªßa b·∫°n!"
            
            # Group fish by tier
            tier_groups = {}
            for fish_id, fish_data in config.FISH_SPECIES.items():
                tier = fish_data.get('tier', 1)
                if tier not in tier_groups:
                    tier_groups[tier] = []
                
                growth_time = fish_data['growth_time'] // 60  # Convert to minutes
                profit = fish_data['sell_price'] - fish_data['buy_price']
                profit_percent = (profit / fish_data['buy_price']) * 100
                
                fish_info = (
                    f"**{fish_data['name']}**\n"
                    f"üí∞ Gi√°: {fish_data['buy_price']:,} coins | ‚è∞ {growth_time}p\n"
                    f"üíé B√°n: {fish_data['sell_price']:,} coins | üìà L·ª£i: {profit_percent:.1f}%\n"
                    f"‚ú® {fish_data['special_ability']}\n"
                    f"`f!pond buy {fish_id}`"
                )
                tier_groups[tier].append(fish_info)
            
            # Add fields for each tier
            tier_names = {1: "üêü C√° C∆° B·∫£n", 2: "‚ú® C√° Hi·∫øm", 3: "üåü C√° Huy·ªÅn Tho·∫°i"}
            
            for tier in sorted(tier_groups.keys()):
                tier_name = tier_names.get(tier, f"Tier {tier}")
                embed.add_field(
                    name=tier_name,
                    value="\n\n".join(tier_groups[tier]),
                    inline=False
                )
            
            embed.add_field(
                name="üí° H∆∞·ªõng d·∫´n",
                value="‚Ä¢ S·ª≠ d·ª•ng `f!pond` ƒë·ªÉ xem ao c√°\n‚Ä¢ C√° tier cao c√≥ l·ª£i nhu·∫≠n l·ªõn h∆°n nh∆∞ng c·∫ßn th·ªùi gian l√¢u h∆°n\n‚Ä¢ ƒê·∫£m b·∫£o c√≥ ƒë·ªß √¥ tr·ªëng trong ao tr∆∞·ªõc khi mua",
                inline=False
            )
            
            await interaction.response.edit_message(embed=embed, view=self)
            
        except Exception as e:
            print(f"Shop fish button error: {e}")
            try:
                await interaction.response.send_message("‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i!", ephemeral=True)
            except:
                pass

    @discord.ui.button(label="üêÑ Gia S√∫c", style=discord.ButtonStyle.secondary)
    async def livestock_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            if interaction.user.id != self.user_id:
                await interaction.response.send_message("‚ùå B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
                return
            
            # Create livestock shop embed
            embed = EmbedBuilder.create_base_embed("üêÑ C·ª≠a h√†ng Gia S√∫c", color=0x8b4513)
            embed.description = "Ch·ªçn lo·∫°i gia s√∫c ƒë·ªÉ nu√¥i trong chu·ªìng c·ªßa b·∫°n!"
            
            # Group animals by tier
            tier_groups = {}
            for animal_id, animal_data in config.ANIMAL_SPECIES.items():
                tier = animal_data.get('tier', 1)
                if tier not in tier_groups:
                    tier_groups[tier] = []
                
                growth_time = animal_data['growth_time'] // 3600  # Convert to hours
                profit = animal_data['sell_price'] - animal_data['buy_price']
                profit_percent = (profit / animal_data['buy_price']) * 100
                
                # Check if animal produces products
                product_info = ""
                if animal_id in config.LIVESTOCK_PRODUCTS:
                    product_data = config.LIVESTOCK_PRODUCTS[animal_id]
                    product_time = product_data['production_time'] // 60  # Convert to minutes
                    product_info = f"\nü•õ S·∫£n ph·∫©m: {product_data['product_emoji']} {product_data['product_name']} (m·ªói {product_time}p)"
                
                animal_info = (
                    f"**{animal_data['name']}**\n"
                    f"üí∞ Gi√°: {animal_data['buy_price']:,} coins | ‚è∞ {growth_time}h\n"
                    f"üíé B√°n: {animal_data['sell_price']:,} coins | üìà L·ª£i: {profit_percent:.1f}%\n"
                    f"‚ú® {animal_data['special_ability']}{product_info}\n"
                    f"`f!barn buy {animal_id}`"
                )
                tier_groups[tier].append(animal_info)
            
            # Add fields for each tier
            tier_names = {1: "üêÑ Gia S√∫c C∆° B·∫£n", 2: "‚ú® Gia C·∫ßm", 3: "üåü Th√∫ C∆∞ng Cao C·∫•p"}
            
            for tier in sorted(tier_groups.keys()):
                tier_name = tier_names.get(tier, f"Tier {tier}")
                field_value = "\n\n".join(tier_groups[tier])
                
                # Check if field is too long and split if needed
                if len(field_value) > 1000:
                    mid_point = len(tier_groups[tier]) // 2
                    embed.add_field(
                        name=f"{tier_name} (Ph·∫ßn 1)",
                        value="\n\n".join(tier_groups[tier][:mid_point]),
                        inline=False
                    )
                    embed.add_field(
                        name=f"{tier_name} (Ph·∫ßn 2)",
                        value="\n\n".join(tier_groups[tier][mid_point:]),
                        inline=False
                    )
                else:
                    embed.add_field(
                        name=tier_name,
                        value=field_value,
                        inline=False
                    )
            
            embed.add_field(
                name="üí° H∆∞·ªõng d·∫´n",
                value="‚Ä¢ S·ª≠ d·ª•ng `f!barn` ƒë·ªÉ xem chu·ªìng tr·∫°i\n‚Ä¢ Gia s√∫c tier cao c·∫ßn th·ªùi gian l√¢u h∆°n nh∆∞ng c√≥ gi√° tr·ªã cao\n‚Ä¢ M·ªôt s·ªë gia s√∫c c√≥ th·ªÉ s·∫£n xu·∫•t s·∫£n ph·∫©m ƒë·ªãnh k·ª≥\n‚Ä¢ ƒê·∫£m b·∫£o c√≥ ƒë·ªß √¥ tr·ªëng trong chu·ªìng tr∆∞·ªõc khi mua",
                inline=False
            )
            
            await interaction.response.edit_message(embed=embed, view=self)
            
        except Exception as e:
            print(f"Shop livestock button error: {e}")
            try:
                await interaction.response.send_message("‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i!", ephemeral=True)
            except:
                pass

    @discord.ui.button(label="üîÑ Quay l·∫°i", style=discord.ButtonStyle.grey)
    async def back_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            if interaction.user.id != self.user_id:
                await interaction.response.send_message("‚ùå B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
                return
            
            embed = EmbedBuilder.create_shop_embed()
            await interaction.response.edit_message(embed=embed, view=self)
            
        except Exception as e:
            print(f"Shop back button error: {e}")
            try:
                await interaction.response.send_message("‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i!", ephemeral=True)
            except:
                pass

class ShopCog(commands.Cog):
    """H·ªá th·ªëng c·ª≠a h√†ng - mua b√°n v·∫≠t ph·∫©m"""
    
    def __init__(self, bot):
        self.bot = bot
    
    async def get_user_safe(self, user_id: int):
        """Get user from database (registration required)"""
        user = await self.bot.db.get_user(user_id)
        return user
    
    @commands.command(name='shop', aliases=['cuahang'])
    @registration_required
    async def shop(self, ctx):
        """Xem c·ª≠a h√†ng
        
        S·ª≠ d·ª•ng: f!shop
        """
        user = await self.get_user_safe(ctx.author.id)
        
        embed = EmbedBuilder.create_shop_embed()
        embed.add_field(
            name="üí∞ S·ªë d∆∞ c·ªßa b·∫°n",
            value=f"{user.money:,} coins",
            inline=False
        )
        
        # Add maid buffs to main shop
        embed = add_maid_buffs_to_embed(embed, ctx.author.id, "shop")
        
        view = ShopView(self.bot, user.user_id)
        await ctx.send(embed=embed, view=view)
    
    @commands.command(name='buy', aliases=['mua'])
    @registration_required
    async def buy(self, ctx, item_type: str = None, quantity = 1):
        """Mua v·∫≠t ph·∫©m t·ª´ c·ª≠a h√†ng
        
        S·ª≠ d·ª•ng: 
        - f!buy <lo·∫°i_h·∫°t> <s·ªë_l∆∞·ª£ng> - Mua h·∫°t gi·ªëng
        - f!buy land - M·ªü r·ªông ƒë·∫•t
        
        V√≠ d·ª•: f!buy carrot 5
        """
        try:
            if not item_type:
                await ctx.send("‚ùå C√°ch s·ª≠ d·ª•ng: `f!buy <v·∫≠t_ph·∫©m> <s·ªë_l∆∞·ª£ng>`\n"
                              "V√≠ d·ª•: `f!buy carrot 5` ho·∫∑c `f!buy land`")
                return
            
            # Convert quantity to int if it's a string
            if isinstance(quantity, str):
                try:
                    quantity = int(quantity)
                except ValueError:
                    await ctx.send("‚ùå S·ªë l∆∞·ª£ng ph·∫£i l√† m·ªôt s·ªë nguy√™n!\n"
                                  "V√≠ d·ª•: `f!buy carrot 5`")
                    return
            
            user = await self.get_user_safe(ctx.author.id)
            if not user:
                await ctx.send("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng!")
                return
            
            if item_type == "land":
                await self._buy_land(ctx, user)
            elif item_type in config.CROPS:
                await self._buy_seeds(ctx, user, item_type, quantity)
            else:
                await ctx.send("‚ùå V·∫≠t ph·∫©m kh√¥ng t·ªìn t·∫°i! S·ª≠ d·ª•ng `f!shop` ƒë·ªÉ xem danh s√°ch.")
                
        except Exception as e:
            print(f"Buy command error: {e}")
            await ctx.send("‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i!")
    
    async def _buy_seeds(self, ctx, user, crop_type: str, quantity):
        """Mua h·∫°t gi·ªëng"""
        try:
            # Ensure quantity is int
            if isinstance(quantity, str):
                quantity = int(quantity)
            
            if quantity <= 0:
                await ctx.send("‚ùå S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0!")
                return
            
            crop_config = config.CROPS[crop_type]
            base_price = crop_config['price']
            
            # Apply event modifier to seed cost
            events_cog = self.bot.get_cog('EventsCog')
            cost_modifier = 1.0
            event_info = ""
            
            if events_cog and hasattr(events_cog, 'get_current_seed_cost_modifier'):
                cost_modifier = events_cog.get_current_seed_cost_modifier()
                
                if cost_modifier < 1.0:
                    discount_percent = (1.0 - cost_modifier) * 100
                    event_info = f"\nüåü Gi·∫£m gi√° s·ª± ki·ªán: -{discount_percent:.0f}%"
                elif cost_modifier > 1.0:
                    increase_percent = (cost_modifier - 1.0) * 100
                    event_info = f"\nüí∏ TƒÉng gi√° s·ª± ki·ªán: +{increase_percent:.0f}%"
            
            # Calculate final cost with modifier
            event_price_per_seed = int(base_price * cost_modifier)
            
            # üéÄ Apply maid seed discount buff
            final_price_per_seed = maid_helper.apply_seed_discount_buff(user.user_id, event_price_per_seed)
            total_cost = final_price_per_seed * quantity
            
            if user.money < total_cost:
                await ctx.send(f"‚ùå Kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn {total_cost:,} coins, b·∫°n c√≥ {user.money:,} coins.")
                return
            
            # Deduct money
            user.money -= total_cost
            await self.bot.db.update_user(user)
            
            # Add seeds to inventory
            await self.bot.db.add_item(user.user_id, 'seed', crop_type, quantity)
            
            # Build success message
            success_message = f"ƒê√£ mua {quantity} h·∫°t {crop_config['name']}\n"
            
            if cost_modifier != 1.0:
                success_message += f"üí∞ Gi√° g·ªëc: {base_price:,} coins/h·∫°t\n"
                success_message += f"üí∞ Gi√° th·ª±c: {final_price_per_seed:,} coins/h·∫°t{event_info}\n"
            else:
                success_message += f"üí∞ Gi√°: {final_price_per_seed:,} coins/h·∫°t\n"
            
            success_message += f"üí∞ T·ªïng chi ph√≠: {total_cost:,} coins\n"
            success_message += f"üí∞ S·ªë d∆∞ c√≤n l·∫°i: {user.money:,} coins"
            
            embed = EmbedBuilder.create_success_embed(
                "Mua th√†nh c√¥ng!",
                success_message
            )
            
            await ctx.send(embed=embed)
            
        except ValueError:
            await ctx.send("‚ùå S·ªë l∆∞·ª£ng ph·∫£i l√† m·ªôt s·ªë nguy√™n!")
        except Exception as e:
            print(f"Buy seeds error: {e}")
            await ctx.send("‚ùå C√≥ l·ªói x·∫£y ra khi mua h·∫°t gi·ªëng!")
    
    async def _buy_land(self, ctx, user):
        """M·ªü r·ªông ƒë·∫•t ƒëai"""
        expansion_cost = calculate_land_expansion_cost(user.land_slots)
        
        if expansion_cost is None:
            await ctx.send("‚ùå B·∫°n ƒë√£ m·ªü r·ªông h·∫øt m·ª©c c√≥ th·ªÉ!")
            return
        
        if user.money < expansion_cost:
            needed = expansion_cost - user.money
            await ctx.send(f"‚ùå Kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn {expansion_cost:,} coins, "
                          f"b·∫°n c√≥ {user.money:,} coins (thi·∫øu {needed:,} coins).")
            return
        
        # Deduct money and add land slot
        user.money -= expansion_cost
        user.land_slots += 1
        await self.bot.db.update_user(user)
        
        embed = EmbedBuilder.create_success_embed(
            "M·ªü r·ªông ƒë·∫•t th√†nh c√¥ng!",
            f"ƒê√£ m·ªü r·ªông th√™m 1 √¥ ƒë·∫•t!\n"
            f"üí∞ Chi ph√≠: {expansion_cost:,} coins\n"
            f"üèûÔ∏è T·ªïng √¥ ƒë·∫•t: {user.land_slots}\n"
            f"üí∞ S·ªë d∆∞ c√≤n l·∫°i: {user.money:,} coins"
        )
        
        await ctx.send(embed=embed)
    
    @commands.command(name='price', aliases=['gia'])
    async def price(self, ctx, crop_type: str = None):
        """Xem gi√° m·ªôt lo·∫°i c√¢y c·ª• th·ªÉ
        
        S·ª≠ d·ª•ng: f!price <lo·∫°i_c√¢y>
        """
        if not crop_type:
            await ctx.send("‚ùå C√°ch s·ª≠ d·ª•ng: `f!price <lo·∫°i_c√¢y>`\n"
                          "V√≠ d·ª•: `f!price carrot`")
            return
        
        if crop_type not in config.CROPS:
            crop_names = [config.CROPS[key]['name'] for key in config.CROPS.keys()]
            await ctx.send(f"‚ùå Lo·∫°i c√¢y kh√¥ng h·ª£p l·ªá!\nC√≥ th·ªÉ xem: {', '.join(crop_names)}")
            return
        
        crop_config = config.CROPS[crop_type]
        
        # Get dynamic pricing if available
        try:
            from utils.pricing import pricing_coordinator
            final_price, modifiers = pricing_coordinator.calculate_final_price(crop_type, self.bot)
            
            base_price = modifiers['base_price']
            price_change = ((final_price - base_price) / base_price) * 100
        except:
            # Fallback to static pricing
            final_price = crop_config['sell_price']
            price_change = 0
        
        embed = EmbedBuilder.create_base_embed(
            f"üí∞ Gi√° {crop_config['name']}",
            color=0xf39c12
        )
        
        embed.add_field(
            name="üå± H·∫°t gi·ªëng",
            value=f"üí∞ Gi√° mua: {crop_config['price']:,} coins",
            inline=True
        )
        
        embed.add_field(
            name="ü•ï N√¥ng s·∫£n",
            value=f"üí∞ Gi√° b√°n: {final_price:,} coins\n"
                  f"üìä Gi√° g·ªëc: {crop_config['sell_price']:,} coins",
            inline=True
        )
        
        # Profit calculation
        profit = final_price - crop_config['price']
        profit_margin = (profit / crop_config['price']) * 100
        
        embed.add_field(
            name="üìà Ph√¢n t√≠ch",
            value=f"üí∞ L·ª£i nhu·∫≠n: {profit:,} coins\n"
                  f"üìä T·ª∑ su·∫•t: {profit_margin:.1f}%\n"
                  f"‚è∞ Th·ªùi gian: {crop_config['growth_time'] // 60}p",
            inline=False
        )
        
        if price_change != 0:
            if price_change > 0:
                embed.add_field(
                    name="üìà Gi√° hi·ªán t·∫°i",
                    value=f"TƒÉng {price_change:.1f}% so v·ªõi gi√° g·ªëc",
                    inline=False
                )
            else:
                embed.add_field(
                    name="üìâ Gi√° hi·ªán t·∫°i",
                    value=f"Gi·∫£m {abs(price_change):.1f}% so v·ªõi gi√° g·ªëc",
                    inline=False
                )
        
        await ctx.send(embed=embed)

async def setup(bot):
    await bot.add_cog(ShopCog(bot)) 