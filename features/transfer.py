#!/usr/bin/env python3
"""
üí∏ TRANSFER SYSTEM - H·ªá th·ªëng chuy·ªÉn ti·ªÅn ƒë∆°n gi·∫£n
Cho ph√©p ng∆∞·ªùi d√πng give/transfer ti·ªÅn cho nhau
"""

import discord
from discord.ext import commands
from datetime import datetime, timedelta
from typing import Dict, Optional
import logging

import config
from utils.embeds import EmbedBuilder
from utils.registration import registration_required

# Setup logger
logger = logging.getLogger('transfer')

class TransferCog(commands.Cog):
    """üí∏ H·ªá th·ªëng chuy·ªÉn ti·ªÅn"""
    
    def __init__(self, bot):
        self.bot = bot
        # Cooldown tracking: user_id -> last_transfer_time
        self.transfer_cooldowns: Dict[int, datetime] = {}
        # Daily limits tracking: user_id -> (date, total_transferred)
        self.daily_limits: Dict[int, tuple] = {}
        
        logger.info("üí∏ Transfer System initialized")
    
    def _check_transfer_cooldown(self, user_id: int) -> Optional[float]:
        """Ki·ªÉm tra cooldown chuy·ªÉn ti·ªÅn (30 gi√¢y)"""
        if user_id not in self.transfer_cooldowns:
            return None
        
        elapsed = datetime.now() - self.transfer_cooldowns[user_id]
        cooldown_seconds = 30  # 30 gi√¢y cooldown
        
        if elapsed.total_seconds() < cooldown_seconds:
            return cooldown_seconds - elapsed.total_seconds()
        
        return None
    
    def _check_daily_limit(self, user_id: int, amount: int) -> tuple:
        """
        Theo d√µi s·ªë ti·ªÅn ƒë√£ chuy·ªÉn (kh√¥ng gi·ªõi h·∫°n)
        Returns: (can_transfer, current_transferred, daily_limit)
        """
        today = datetime.now().date()
        
        if user_id not in self.daily_limits:
            self.daily_limits[user_id] = (today, 0)
        
        last_date, transferred_today = self.daily_limits[user_id]
        
        # Reset if new day
        if last_date != today:
            transferred_today = 0
            self.daily_limits[user_id] = (today, 0)
        
        # Kh√¥ng gi·ªõi h·∫°n - lu√¥n cho ph√©p chuy·ªÉn
        return True, transferred_today, 999999999
    
    def _update_daily_limit(self, user_id: int, amount: int):
        """C·∫≠p nh·∫≠t s·ªë ti·ªÅn ƒë√£ chuy·ªÉn h√¥m nay"""
        today = datetime.now().date()
        
        if user_id not in self.daily_limits:
            self.daily_limits[user_id] = (today, amount)
        else:
            _, transferred_today = self.daily_limits[user_id]
            self.daily_limits[user_id] = (today, transferred_today + amount)
    
    async def _find_user(self, ctx, user_input: str) -> Optional[discord.Member]:
        """T√¨m user theo nhi·ªÅu c√°ch kh√°c nhau"""
        if not user_input.strip():
            return None
        
        # Clean input - remove Discord mention formatting
        clean_input = user_input.replace('@', '').replace('<', '').replace('>', '').replace('!', '').strip()
        
        # Method 1: Try Discord's built-in converter
        try:
            converter = commands.MemberConverter()
            member = await converter.convert(ctx, user_input)
            if member and isinstance(member, discord.Member):
                return member
        except commands.MemberNotFound:
            pass
        except Exception:
            pass
        
        # Method 2: Try as user ID
        if clean_input.isdigit():
            try:
                user_id = int(clean_input)
                member = ctx.guild.get_member(user_id)
                if member and isinstance(member, discord.Member):
                    return member
            except ValueError:
                pass
        
        # Method 3: Search by display name or username (case-insensitive)
        for member in ctx.guild.members:
            if (member.display_name.lower() == clean_input.lower() or 
                member.name.lower() == clean_input.lower()):
                if isinstance(member, discord.Member):
                    return member
        
        # Method 4: Partial name search
        matches = []
        for member in ctx.guild.members:
            if (clean_input.lower() in member.display_name.lower() or 
                clean_input.lower() in member.name.lower()):
                matches.append(member)
        
        if len(matches) == 1:
            return matches[0]
        
        return None
    
    def _parse_amount(self, amount_str: str) -> Optional[int]:
        """Parse s·ªë ti·ªÅn v·ªõi h·ªó tr·ª£ k, m"""
        try:
            amount_str = amount_str.lower().replace(',', '').replace('.', '')
            
            # Handle suffixes
            if amount_str.endswith('k'):
                amount = int(float(amount_str[:-1]) * 1000)
            elif amount_str.endswith('m'):
                amount = int(float(amount_str[:-1]) * 1000000)
            else:
                amount = int(amount_str)
            
            return amount if amount > 0 else None
                
        except (ValueError, TypeError):
            return None
    
    @commands.command(name='give', aliases=['transfer', 'send', 'pay'])
    @registration_required
    async def give_money(self, ctx, user_input: str = None, amount_str: str = None):
        """
        üí∏ Chuy·ªÉn ti·ªÅn cho ng∆∞·ªùi d√πng kh√°c
        
        C√°ch d√πng: f!give @user <s·ªë_ti·ªÅn>
        V√≠ d·ª•: f!give @Latina 1000
        
        T√≠nh nƒÉng:
        ‚Ä¢ Kh√¥ng gi·ªõi h·∫°n s·ªë ti·ªÅn
        ‚Ä¢ Cooldown: 30 gi√¢y
        ‚Ä¢ H·ªó tr·ª£: 1k = 1,000, 1m = 1,000,000
        """
        try:
            # Check if arguments provided
            if not user_input or not amount_str:
                embed = discord.Embed(
                    title="üí∏ **CHUY·ªÇN TI·ªÄN**",
                    description=(
                        f"**C√°ch d√πng:** `{config.PREFIX}give @user <s·ªë_ti·ªÅn>`\n"
                        f"**V√≠ d·ª•:** `{config.PREFIX}give @Latina 1000`\n\n"
                        f"**T√≠nh nƒÉng:**\n"
                        f"‚Ä¢ Kh√¥ng gi·ªõi h·∫°n s·ªë ti·ªÅn\n"
                        f"‚Ä¢ Cooldown: 30 gi√¢y\n"
                        f"‚Ä¢ H·ªó tr·ª£: `1k` = 1,000, `1m` = 1,000,000\n\n"
                        f"üí° **Chuy·ªÉn bao nhi√™u c≈©ng ƒë∆∞·ª£c!**"
                    ),
                    color=0x3498db
                )
                await ctx.send(embed=embed)
                return
            
            # Parse amount
            amount = self._parse_amount(amount_str)
            if amount is None:
                await ctx.send("‚ùå **S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!** V√≠ d·ª•: `1000`, `5k`, `1.5m`")
                return
            
            # Ch·ªâ ki·ªÉm tra s·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0
            if amount <= 0:
                await ctx.send("‚ùå **S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!**")
                return
            
            # Find target user
            target_user = await self._find_user(ctx, user_input)
            if not target_user:
                await ctx.send(f"‚ùå **Kh√¥ng t√¨m th·∫•y user** `{user_input}`!\n"
                             f"üí° Th·ª≠: `{config.PREFIX}give @username 1000`")
                return
            
            # Security checks
            if target_user.id == ctx.author.id:
                await ctx.send("‚ùå **Kh√¥ng th·ªÉ chuy·ªÉn ti·ªÅn cho ch√≠nh m√¨nh!**")
                return
            
            if target_user.bot:
                await ctx.send("‚ùå **Kh√¥ng th·ªÉ chuy·ªÉn ti·ªÅn cho bot!**")
                return
            
            # Check cooldown
            cooldown = self._check_transfer_cooldown(ctx.author.id)
            if cooldown:
                await ctx.send(f"‚è∞ **ƒêang cooldown!** Ch·ªù `{cooldown:.1f}s` n·ªØa.")
                return
            
            # Track daily transfers (kh√¥ng gi·ªõi h·∫°n)
            can_transfer, transferred_today, daily_limit = self._check_daily_limit(ctx.author.id, amount)
            
            # Check sender balance
            sender = await self.bot.db.get_user(ctx.author.id)
            if not sender:
                await ctx.send(f"‚ùå **Ch∆∞a ƒëƒÉng k√Ω!** D√πng `{config.PREFIX}register`")
                return
            
            if sender.money < amount:
                await ctx.send(f"‚ùå **Kh√¥ng ƒë·ªß ti·ªÅn!**\n"
                             f"S·ªë d∆∞: `{sender.money:,}` coins\n"
                             f"C·∫ßn: `{amount:,}` coins")
                return
            
            # Check receiver registration
            receiver = await self.bot.db.get_user(target_user.id)
            if not receiver:
                await ctx.send(f"‚ùå **{target_user.display_name} ch∆∞a ƒëƒÉng k√Ω!**\n"
                             f"H·ªç c·∫ßn d√πng `{config.PREFIX}register` tr∆∞·ªõc.")
                return
            
            # Execute transfer
            sender_new_balance = await self.bot.db.update_user_money(ctx.author.id, -amount)
            receiver_new_balance = await self.bot.db.update_user_money(target_user.id, amount)
            
            # Update tracking
            self.transfer_cooldowns[ctx.author.id] = datetime.now()
            self._update_daily_limit(ctx.author.id, amount)
            
            # Log transaction
            logger.info(f"Transfer: {ctx.author.id} -> {target_user.id}, amount: {amount}")
            
            # Create success embed
            embed = discord.Embed(
                title="‚úÖ **CHUY·ªÇN TI·ªÄN TH√ÄNH C√îNG**",
                color=0x00ff00,
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üë§ **Ng∆∞·ªùi g·ª≠i**",
                value=f"{ctx.author.display_name}\nüí∞ S·ªë d∆∞: `{sender_new_balance:,}` coins",
                inline=True
            )
            
            embed.add_field(
                name="üéØ **Ng∆∞·ªùi nh·∫≠n**",
                value=f"{target_user.display_name}\nüí∞ S·ªë d∆∞: `{receiver_new_balance:,}` coins",
                inline=True
            )
            
            embed.add_field(
                name="üí∞ **S·ªë ti·ªÅn**",
                value=f"`{amount:,}` coins",
                inline=False
            )
            
            # Daily transfer info (no limits)
            _, new_transferred_today, _ = self._check_daily_limit(ctx.author.id, 0)
            
            embed.add_field(
                name="üìä **ƒê√£ chuy·ªÉn h√¥m nay**",
                value=f"T·ªïng c·ªông: `{new_transferred_today:,}` coins\n"
                      f"üí° Kh√¥ng gi·ªõi h·∫°n",
                inline=False
            )
            
            embed.set_footer(text=f"Transfer ID: {ctx.author.id}")
            
            await ctx.send(embed=embed)
            
            # Try to notify receiver via DM
            try:
                if target_user.status != discord.Status.offline:
                    notify_embed = discord.Embed(
                        title="üí∞ **B·∫†N NH·∫¨N ƒê∆Ø·ª¢C TI·ªÄN!**",
                        description=f"**{ctx.author.display_name}** ƒë√£ chuy·ªÉn cho b·∫°n `{amount:,}` coins!",
                        color=0xf1c40f
                    )
                    notify_embed.add_field(
                        name="üí∞ **S·ªë d∆∞ m·ªõi**",
                        value=f"`{receiver_new_balance:,}` coins",
                        inline=False
                    )
                    
                    await target_user.send(embed=notify_embed)
            except:
                # Cannot send DM, ignore
                pass
            
        except Exception as e:
            logger.error(f"Transfer error: {e}")
            await ctx.send(f"‚ùå **L·ªói chuy·ªÉn ti·ªÅn:** {str(e)}")
    
    @commands.command(name='transfer_stats', aliases=['tstats'])
    @registration_required 
    async def transfer_stats(self, ctx):
        """
        üìä Xem th·ªëng k√™ chuy·ªÉn ti·ªÅn c·ªßa b·∫°n
        """
        try:
            user_id = ctx.author.id
            
            # Get daily transfer info (no limits)
            today = datetime.now().date()
            
            if user_id in self.daily_limits:
                last_date, transferred_today = self.daily_limits[user_id]
                if last_date != today:
                    transferred_today = 0
            else:
                transferred_today = 0
            
            # Check cooldown
            cooldown = self._check_transfer_cooldown(user_id)
            cooldown_text = f"‚è∞ {cooldown:.1f}s" if cooldown else "‚úÖ S·∫µn s√†ng"
            
            # Create embed
            embed = discord.Embed(
                title="üìä **TH·ªêNG K√ä CHUY·ªÇN TI·ªÄN**",
                color=0x3498db,
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üìÖ **H√¥m nay**",
                value=f"ƒê√£ chuy·ªÉn: `{transferred_today:,}` coins\n"
                      f"üí° Kh√¥ng gi·ªõi h·∫°n",
                inline=False
            )
            
            embed.add_field(
                name="‚è∞ **Tr·∫°ng th√°i**",
                value=cooldown_text,
                inline=True
            )
            
            embed.add_field(
                name="üìã **T√≠nh nƒÉng**",
                value="‚Ä¢ Kh√¥ng gi·ªõi h·∫°n s·ªë ti·ªÅn\n"
                      "‚Ä¢ Cooldown: `30` gi√¢y\n"
                      "‚Ä¢ H·ªó tr·ª£: `1k`, `1m`\n"
                      "‚Ä¢ Chuy·ªÉn bao nhi√™u c≈©ng ƒë∆∞·ª£c! üöÄ",
                inline=False
            )
            
            embed.set_footer(text=f"User ID: {user_id}")
            await ctx.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Transfer stats error: {e}")
            await ctx.send(f"‚ùå **L·ªói xem th·ªëng k√™:** {str(e)}")

async def setup(bot):
    await bot.add_cog(TransferCog(bot)) 