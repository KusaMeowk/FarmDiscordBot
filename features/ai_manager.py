import discord
from discord.ext import commands, tasks
from datetime import datetime, timedelta
import random
import asyncio
from typing import Optional, Dict, List
import config
from database.database import Database
from utils.embeds import EmbedBuilder
from utils.enhanced_logging import get_bot_logger
from utils.task_cleanup import TaskCleanupManager
from ai.game_master import GameMasterAI, AIDecision
from ai.event_manager import EventManagerAI, SmartEvent
from ai.weather_predictor import WeatherPredictorAI, WeatherPrediction

logger = get_bot_logger()

class AICog(commands.Cog):
    """
    AI Manager Cog - Coordinates all AI systems
    
    This cog manages the Game Master AI, Event Manager AI, and Weather Predictor AI
    to create an intelligent, adaptive game experience.
    """
    
    def __init__(self, bot):
        self.bot = bot
        self.db = bot.db
        
        # AI Components
        self.game_master = GameMasterAI()
        self.event_manager = EventManagerAI(database=bot.db)
        self.weather_predictor = WeatherPredictorAI()
        
        # AI State
        self.ai_enabled = True
        self.last_ai_decision_time = None
        self.ai_decision_interval = 30  # minutes
        
        # Load AI state
        asyncio.create_task(self._load_ai_state())
        
        # Start AI tasks
        self.ai_decision_task.start()
        self.ai_weather_task.start()
        
    def cog_unload(self):
        """Clean up when cog is unloaded"""
        # Use TaskCleanupManager for safe cleanup
        TaskCleanupManager.safe_cancel_task(
            getattr(self, 'ai_decision_task', None), 
            'ai_decision_task'
        )
        
        TaskCleanupManager.safe_cancel_task(
            getattr(self, 'ai_weather_task', None), 
            'ai_weather_task'
        )
        
        logger.info("üßπ AI Manager cleanup completed")
        
    async def _load_ai_state(self):
        """Load AI state t·ª´ database"""
        try:
            # Load Event Manager state
            await self.event_manager.load_ai_state()
            logger.info("ü§ñ AI Manager state loaded successfully")
        except Exception as e:
            logger.error(f"Error loading AI Manager state: {e}")
    
    async def _save_ai_state(self):
        """Save AI state v√†o database"""
        try:
            # Save Event Manager state
            await self.event_manager.save_ai_state()
        except Exception as e:
            logger.error(f"Error saving AI Manager state: {e}")
    
    @tasks.loop(minutes=30)
    async def ai_decision_task(self):
        """Main AI decision loop - runs every 30 minutes"""
        if not self.ai_enabled:
            return
            
        try:
            logger.info("ü§ñ AI Decision Task: Starting analysis...")
            
            # Analyze game state
            game_state = await self.game_master.analyze_game_state(self.bot)
            
            # Make event decision
            event_decision = await self.game_master.make_event_decision(self.bot)
            if event_decision:
                await self._execute_event_decision(event_decision, game_state)
            
            # Make weather decision
            weather_decision = await self.game_master.make_weather_decision(self.bot)
            if weather_decision:
                await self._execute_weather_decision(weather_decision, game_state)
            
            self.last_ai_decision_time = datetime.now()
            logger.info("ü§ñ AI Decision Task: Analysis complete")
            
        except Exception as e:
            logger.error(f"Critical error in AI decision task: {e}")
            # Don't reraise - let task continue running
            # Store error for diagnostics
            self.last_error = {
                'type': 'ai_decision_task',
                'error': str(e),
                'timestamp': datetime.now()
            }
    
    @tasks.loop(minutes=45)
    async def ai_weather_task(self):
        """AI Weather management task - runs every 45 minutes"""
        if not self.ai_enabled:
            return
            
        try:
            # Get current weather
            weather_cog = self.bot.get_cog('WeatherCog')
            if not weather_cog:
                return
            
            weather_data = await weather_cog.fetch_weather_data()
            current_weather = weather_data.get('weather', [{}])[0].get('main', 'clouds').lower()
            
            # Get game state
            game_state = await self.game_master.analyze_game_state(self.bot)
            
            # Predict next weather
            prediction = await self.weather_predictor.predict_next_weather(game_state, current_weather)
            
            # Update weather history
            self.weather_predictor.update_history(current_weather)
            
            # Log AI weather decision
            logger.info(f"üå§Ô∏è AI Weather: Predicted {prediction.weather_type} "
                       f"(Confidence: {prediction.probability:.1%}) - {prediction.ai_reasoning}")
            
        except Exception as e:
            logger.error(f"Error in AI weather task: {e}")
    
    async def _execute_event_decision(self, ai_decision, game_state):
        """Execute AI event decision"""
        try:
            # Check if we should trigger new event (cooldown logic)
            if not self.event_manager.should_trigger_new_event(game_state):
                return
                
            # Generate contextual event
            smart_event = await self.event_manager.generate_contextual_event(game_state, ai_decision)
            if not smart_event:
                return
            
            # Convert to events cog format
            events_cog = self.bot.get_cog('EventsCog')
            if not events_cog:
                logger.error("EventsCog not found")
                return
            
            # Create event data in expected format
            event_data = {
                'name': smart_event.name,
                'description': smart_event.description,
                'effect_type': smart_event.effect_type,
                'effect_value': smart_event.effect_value,
                'duration': smart_event.duration_hours * 3600,  # Convert to seconds
                'ai_generated': True,
                'ai_reasoning': smart_event.ai_reasoning,
                'rarity': smart_event.rarity
            }
            
            # Trigger the event
            await events_cog.start_event(event_data)
            
            # Update event manager history
            self.event_manager.event_history.append(smart_event)
            self.event_manager.last_event_time = datetime.now()
            
            # Save AI state to persist the event trigger time
            await self._save_ai_state()
            
            # Notify about AI decision
            await self._notify_ai_event(smart_event, ai_decision)
            
            logger.info(f"ü§ñ AI Event: Triggered '{smart_event.name}' - {smart_event.ai_reasoning}")
            
        except Exception as e:
            logger.error(f"Error executing event decision: {e}")
    
    async def _execute_weather_decision(self, ai_decision, game_state):
        """Execute AI weather decision"""
        try:
            # Get WeatherCog to apply AI weather
            weather_cog = self.bot.get_cog('WeatherCog')
            if not weather_cog:
                logger.error("WeatherCog not found")
                return
            
            # Apply AI weather prediction
            weather_prediction = await weather_cog.apply_ai_weather()
            
            if weather_prediction:
                # Notify about weather change
                await self._notify_ai_weather(weather_prediction, ai_decision)
                logger.info(f"üå§Ô∏è AI Weather: Applied '{weather_prediction['weather']}' - {weather_prediction.get('reasoning', '')}")
            else:
                logger.warning("Failed to apply AI weather prediction")
            
        except Exception as e:
            logger.error(f"Error executing weather decision: {e}")
    
    async def _notify_ai_weather(self, weather_prediction: dict, ai_decision):
        """Notify about AI-generated weather changes"""
        try:
            # Get configured AI notifications from database
            ai_notifications = await self.bot.db.get_all_ai_notifications()
            
            for notification in ai_notifications:
                # Skip if weather notifications are disabled
                if not notification.weather_notifications:
                    continue
                
                guild = self.bot.get_guild(notification.guild_id)
                if not guild:
                    continue
                
                channel = guild.get_channel(notification.channel_id)
                if not channel:
                    continue
                
                # Weather info
                weather_emojis = {
                    'sunny': '‚òÄÔ∏è',
                    'cloudy': '‚òÅÔ∏è',
                    'rainy': 'üåßÔ∏è',
                    'stormy': '‚õàÔ∏è',
                    'perfect': 'üåü'
                }
                
                weather_names = {
                    'sunny': 'N·∫Øng',
                    'cloudy': 'C√≥ m√¢y',
                    'rainy': 'M∆∞a',
                    'stormy': 'B√£o',
                    'perfect': 'Ho√†n h·∫£o'
                }
                
                weather_emoji = weather_emojis.get(weather_prediction['weather'], 'üå§Ô∏è')
                weather_name = weather_names.get(weather_prediction['weather'], weather_prediction['weather'])
                
                embed = EmbedBuilder.create_base_embed(
                    title="üå§Ô∏è AI Weather Change",
                    description=f"Weather Predictor AI ƒë√£ ƒëi·ªÅu ch·ªânh th·ªùi ti·∫øt!",
                    color=0x3498DB
                )
                embed.add_field(
                    name=f"{weather_emoji} Th·ªùi Ti·∫øt M·ªõi",
                    value=f"**{weather_name}**\n‚è∞ Th·ªùi gian: {weather_prediction['duration']//3600}h",
                    inline=True
                )
                embed.add_field(
                    name="üìä ƒê·ªô Tin C·∫≠y",
                    value=f"{weather_prediction.get('confidence', 0.5):.1%}",
                    inline=True
                )
                if weather_prediction.get('reasoning'):
                    embed.add_field(
                        name="üß† AI Reasoning",
                        value=weather_prediction['reasoning'][:100] + "..." if len(weather_prediction['reasoning']) > 100 else weather_prediction['reasoning'],
                        inline=False
                    )
                embed.set_footer(text="AI Weather Predictor ƒëang ph√¢n t√≠ch v√† ƒëi·ªÅu ch·ªânh game balance")
                
                try:
                    await channel.send(embed=embed)
                except discord.Forbidden:
                    logger.warning(f"No permission to send AI weather notification in guild {guild.name}")
                except Exception as e:
                    logger.error(f"Error sending AI weather notification to {guild.name}: {e}")
                    
        except Exception as e:
            logger.error(f"Error in AI weather notification: {e}")
    
    async def _notify_ai_event(self, smart_event: SmartEvent, ai_decision):
        """Notify about AI-generated events"""
        try:
            # Get configured AI notifications from database
            ai_notifications = await self.bot.db.get_all_ai_notifications()
            
            for notification in ai_notifications:
                # Skip if event notifications are disabled
                if not notification.event_notifications:
                    continue
                
                guild = self.bot.get_guild(notification.guild_id)
                if not guild:
                    continue
                
                channel = guild.get_channel(notification.channel_id)
                if not channel:
                    continue
                
                embed = EmbedBuilder.create_base_embed(
                    title="Update Event",
                    description=f"S·ª± ki·ªán m·ªõi!",
                    color=0x9B59B6
                )
                embed.add_field(
                    name=f"{smart_event.name}",
                    value=smart_event.description,
                    inline=False
                )
                embed.add_field(
                    name="üß† AI Reasoning",
                    value=smart_event.ai_reasoning,
                    inline=True
                )
                embed.add_field(
                    name="üíé Rarity",
                    value=smart_event.rarity.title(),
                    inline=True
                )
                embed.add_field(
                    name="‚è∞ Duration",
                    value=f"{smart_event.duration_hours} gi·ªù",
                    inline=True
                )
                embed.set_footer(text="AI Engine ƒëang h·ªçc v√† th√≠ch ·ª©ng v·ªõi h√†nh vi ng∆∞·ªùi ch∆°i")
                
                try:
                    await channel.send(embed=embed)
                except discord.Forbidden:
                    logger.warning(f"No permission to send AI notification in guild {guild.name}")
                except Exception as e:
                    logger.error(f"Error sending AI notification to {guild.name}: {e}")
                    
        except Exception as e:
            logger.error(f"Error in AI notification: {e}")
    
    # Admin Commands
    @commands.group(name='ai', invoke_without_command=True)
    @commands.has_permissions(administrator=True)
    async def ai_commands(self, ctx):
        """AI management commands"""
        embed = EmbedBuilder.create_base_embed(
            title="ü§ñ AI Engine Commands",
            description="Qu·∫£n l√Ω h·ªá th·ªëng AI c·ªßa bot",
            color=0x9B59B6
        )
        embed.add_field(
            name="üìä Monitoring",
            value="`f!ai status` - Tr·∫°ng th√°i AI\n`f!ai report` - B√°o c√°o chi ti·∫øt\n`f!ai analytics` - Ph√¢n t√≠ch d·ªØ li·ªáu",
            inline=False
        )
        embed.add_field(
            name="‚öôÔ∏è Control",
            value="`f!ai toggle` - B·∫≠t/t·∫Øt AI\n`f!ai reset` - Reset AI state\n`f!ai force` - Force AI decision",
            inline=False
        )
        embed.add_field(
            name="üîî Notifications",
            value="`f!ai setupnotify` - Setup th√¥ng b√°o\n`f!ai notifystatus` - Tr·∫°ng th√°i th√¥ng b√°o\n`f!ai togglenotify` - B·∫≠t/t·∫Øt th√¥ng b√°o",
            inline=False
        )
        await ctx.send(embed=embed)
    
    @ai_commands.command(name='status')
    @commands.has_permissions(administrator=True)
    async def ai_status(self, ctx):
        """Show AI system status"""
        embed = EmbedBuilder.create_base_embed(
            title="ü§ñ AI Engine Status",
            description="Tr·∫°ng th√°i h·ªá th·ªëng AI hi·ªán t·∫°i",
            color=0x9B59B6 if self.ai_enabled else 0xE74C3C
        )
        
        # System status
        status_emoji = "üü¢" if self.ai_enabled else "üî¥"
        embed.add_field(
            name=f"{status_emoji} System Status",
            value=f"{'Ho·∫°t ƒë·ªông' if self.ai_enabled else 'T·∫°m d·ª´ng'}",
            inline=True
        )
        
        # Last decision time
        if self.last_ai_decision_time:
            time_diff = datetime.now() - self.last_ai_decision_time
            minutes_ago = int(time_diff.total_seconds() / 60)
            embed.add_field(
                name="üïê Last Decision",
                value=f"{minutes_ago} ph√∫t tr∆∞·ªõc",
                inline=True
            )
        
        # Task status
        task_status = "üü¢ Running" if not self.ai_decision_task.is_being_cancelled() else "üî¥ Stopped"
        embed.add_field(
            name="üîÑ Background Tasks",
            value=task_status,
            inline=True
        )
        
        # Current AI state
        game_state = self.game_master.game_state
        if game_state:
            embed.add_field(
                name="üìä Game State",
                value=f"Players: {game_state.active_players}\nSatisfaction: {game_state.player_satisfaction:.1%}\nActivity: {game_state.recent_activity_level:.1%}",
                inline=False
            )
        
        await ctx.send(embed=embed)
    
    @ai_commands.command(name='report')
    @commands.has_permissions(administrator=True)
    async def ai_report(self, ctx):
        """Generate comprehensive AI report"""
        try:
            # Generate reports from all AI components
            game_master_report = self.game_master.get_ai_report()
            weather_report = self.weather_predictor.get_ai_weather_report()
            event_analytics = self.event_manager.get_event_analytics()
            
            # Create comprehensive embed
            embed = EmbedBuilder.create_base_embed(
                title="üß† Comprehensive AI Report",
                description="B√°o c√°o chi ti·∫øt v·ªÅ ho·∫°t ƒë·ªông c·ªßa AI Engine",
                color=0x9B59B6
            )
            
            # Game Master section
            embed.add_field(
                name="üéÆ Game Master AI",
                value=game_master_report[:1000] + "..." if len(game_master_report) > 1000 else game_master_report,
                inline=False
            )
            
            # Event Manager section  
            embed.add_field(
                name="üé≠ Event Manager AI",
                value=f"Events Generated: {event_analytics.get('total_events_generated', 0)}\nActive Events: {event_analytics.get('active_events', 0)}",
                inline=True
            )
            
            # Weather Predictor section
            embed.add_field(
                name="üå§Ô∏è Weather AI",
                value=f"Prediction Accuracy: {self.weather_predictor.prediction_accuracy:.1%}\nPattern: {self.weather_predictor.current_pattern.name if self.weather_predictor.current_pattern else 'Standalone'}",
                inline=True
            )
            
            await ctx.send(embed=embed)
            
            # Send detailed weather report in separate message
            await ctx.send(f"```{weather_report}```")
            
        except Exception as e:
            await ctx.send(f"‚ùå L·ªói t·∫°o b√°o c√°o: {e}")
    
    @ai_commands.command(name='toggle')
    @commands.has_permissions(administrator=True)
    async def ai_toggle(self, ctx):
        """Toggle AI system on/off"""
        self.ai_enabled = not self.ai_enabled
        status = "b·∫≠t" if self.ai_enabled else "t·∫Øt"
        emoji = "üü¢" if self.ai_enabled else "üî¥"
        
        embed = EmbedBuilder.create_base_embed(
            title=f"{emoji} AI Engine {status.title()}",
            description=f"H·ªá th·ªëng AI ƒë√£ ƒë∆∞·ª£c {status}",
            color=0x2ECC71 if self.ai_enabled else 0xE74C3C
        )
        await ctx.send(embed=embed)
    
    @ai_commands.command(name='force')
    @commands.has_permissions(administrator=True)
    async def ai_force_decision(self, ctx):
        """Force AI to make a decision now"""
        if not self.ai_enabled:
            await ctx.send("‚ùå AI Engine ƒëang t·∫Øt!")
            return
        
        embed = EmbedBuilder.create_base_embed(
            title="ü§ñ Forcing AI Decision...",
            description="ƒêang bu·ªôc AI th·ª±c hi·ªán ph√¢n t√≠ch v√† quy·∫øt ƒë·ªãnh...",
            color=0xF39C12
        )
        message = await ctx.send(embed=embed)
        
        try:
            # Force AI analysis
            await self.ai_decision_task()
            
            embed.title = "‚úÖ AI Decision Completed"
            embed.description = "AI ƒë√£ ho√†n th√†nh ph√¢n t√≠ch v√† th·ª±c hi·ªán quy·∫øt ƒë·ªãnh!"
            embed.color = 0x2ECC71
            await message.edit(embed=embed)
            
        except Exception as e:
            embed.title = "‚ùå AI Decision Failed"
            embed.description = f"L·ªói: {e}"
            embed.color = 0xE74C3C
            await message.edit(embed=embed)
    
    @ai_commands.command(name='reset')
    @commands.has_permissions(administrator=True)
    async def ai_reset(self, ctx):
        """Reset AI state"""
        # Reset all AI components
        self.game_master = GameMasterAI()
        self.event_manager = EventManagerAI(database=self.bot.db)
        self.weather_predictor = WeatherPredictorAI()
        self.last_ai_decision_time = None
        
        embed = EmbedBuilder.create_base_embed(
            title="üîÑ AI Engine Reset",
            description="T·∫•t c·∫£ th√†nh ph·∫ßn AI ƒë√£ ƒë∆∞·ª£c reset v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu",
            color=0xF39C12
        )
        await ctx.send(embed=embed)
    
    @ai_commands.command(name='analytics')
    @commands.has_permissions(administrator=True)
    async def ai_analytics(self, ctx):
        """Show detailed AI analytics"""
        try:
            event_analytics = self.event_manager.get_event_analytics()
            weather_analytics = self.weather_predictor.get_weather_analytics()
            
            embed = EmbedBuilder.create_base_embed(
                title="üìä AI Analytics Dashboard",
                description="Ph√¢n t√≠ch chi ti·∫øt v·ªÅ hi·ªáu su·∫•t AI",
                color=0x3498DB
            )
            
            # Event analytics
            if event_analytics.get('total_events_generated', 0) > 0:
                embed.add_field(
                    name="üé≠ Event Analytics",
                    value=f"Total Events: {event_analytics['total_events_generated']}\nAvg Duration: {event_analytics.get('average_event_duration', 0):.1f}h",
                    inline=True
                )
            
            # Weather analytics
            if weather_analytics.get('weather_history_length', 0) > 0:
                embed.add_field(
                    name="üå§Ô∏è Weather Analytics",
                    value=f"History Length: {weather_analytics['weather_history_length']}\nStability: {weather_analytics.get('weather_stability', 0):.1%}",
                    inline=True
                )
            
            # System performance
            uptime = datetime.now() - self.bot.start_time if hasattr(self.bot, 'start_time') else timedelta(0)
            embed.add_field(
                name="‚ö° Performance",
                value=f"Uptime: {int(uptime.total_seconds() / 3600)}h\nDecision Interval: {self.ai_decision_interval}min",
                inline=True
            )
            
            await ctx.send(embed=embed)
            
        except Exception as e:
            await ctx.send(f"‚ùå L·ªói t·∫°o analytics: {e}")
    
    @ai_commands.command(name='setupnotify', aliases=['setup_notifications'])
    @commands.has_permissions(manage_channels=True)
    async def setup_ai_notifications(self, ctx, channel_id: int = None, 
                                   event_notifications: bool = True, weather_notifications: bool = True):
        """Setup AI notifications cho server
        
        S·ª≠ d·ª•ng:
        - f!ai setupnotify - Setup t·∫°i channel hi·ªán t·∫°i
        - f!ai setupnotify <channel_id> - Setup t·∫°i channel c·ª• th·ªÉ
        - f!ai setupnotify <channel_id> True False - Ch·ªâ event notifications
        """
        if channel_id is None:
            channel_id = ctx.channel.id
            channel = ctx.channel
        else:
            channel = self.bot.get_channel(channel_id)
            if not channel:
                await ctx.send("‚ùå Kh√¥ng t√¨m th·∫•y channel!")
                return
            
            # Check if channel is in same guild
            if channel.guild.id != ctx.guild.id:
                await ctx.send("‚ùå Channel ph·∫£i trong c√πng server!")
                return
        
        try:
            await self.bot.db.set_ai_notification(
                ctx.guild.id, 
                channel_id, 
                event_notifications, 
                weather_notifications
            )
            
            embed = EmbedBuilder.create_base_embed(
                title="ü§ñ AI Notifications Setup",
                description="ƒê√£ thi·∫øt l·∫≠p th√¥ng b√°o AI th√†nh c√¥ng!",
                color=0x2ECC71
            )
            embed.add_field(
                name="üìç Channel",
                value=f"<#{channel_id}>",
                inline=True
            )
            embed.add_field(
                name="üé™ Event Notifications",
                value="‚úÖ B·∫≠t" if event_notifications else "‚ùå T·∫Øt",
                inline=True
            )
            embed.add_field(
                name="üå§Ô∏è Weather Notifications", 
                value="‚úÖ B·∫≠t" if weather_notifications else "‚ùå T·∫Øt",
                inline=True
            )
            embed.add_field(
                name="üí° Qu·∫£n l√Ω",
                value="`f!ai togglenotify` - B·∫≠t/t·∫Øt notifications\n"
                      "`f!ai notifystatus` - Xem tr·∫°ng th√°i\n"
                      "`f!ai toggleevent` - B·∫≠t/t·∫Øt event notifications\n"
                      "`f!ai toggleweather` - B·∫≠t/t·∫Øt weather notifications",
                inline=False
            )
            
            await ctx.send(embed=embed)
            
        except Exception as e:
            await ctx.send(f"‚ùå L·ªói khi setup: {e}")
    
    @ai_commands.command(name='notifystatus', aliases=['notification_status'])
    async def ai_notification_status(self, ctx):
        """Ki·ªÉm tra tr·∫°ng th√°i AI notifications"""
        notification = await self.bot.db.get_ai_notification(ctx.guild.id)
        
        embed = EmbedBuilder.create_base_embed(
            title="ü§ñ AI Notification Status",
            description="Tr·∫°ng th√°i th√¥ng b√°o AI cho server n√†y",
            color=0x3498DB
        )
        
        if notification:
            channel = self.bot.get_channel(notification.channel_id)
            channel_text = f"<#{notification.channel_id}>" if channel else f"ID: {notification.channel_id} (kh√¥ng t√¨m th·∫•y)"
            
            status_emoji = "üü¢" if notification.enabled else "üî¥"
            event_emoji = "üü¢" if notification.event_notifications else "üî¥"
            weather_emoji = "üü¢" if notification.weather_notifications else "üî¥"
            
            embed.add_field(
                name=f"{status_emoji} Tr·∫°ng th√°i t·ªïng",
                value="Ho·∫°t ƒë·ªông" if notification.enabled else "T·∫°m d·ª´ng",
                inline=True
            )
            embed.add_field(
                name="üìç Channel",
                value=channel_text,
                inline=True
            )
            embed.add_field(
                name="Settings",
                value=f"{event_emoji} Events\n{weather_emoji} Weather",
                inline=True
            )
        else:
            embed.add_field(
                name="‚ùå Ch∆∞a thi·∫øt l·∫≠p",
                value="S·ª≠ d·ª•ng `f!ai setupnotify` ƒë·ªÉ thi·∫øt l·∫≠p th√¥ng b√°o",
                inline=False
            )
        
        await ctx.send(embed=embed)
    
    @ai_commands.command(name='togglenotify', aliases=['toggle_notifications'])
    @commands.has_permissions(manage_channels=True)
    async def toggle_ai_notifications(self, ctx, enabled: bool = None):
        """B·∫≠t/t·∫Øt AI notifications"""
        notification = await self.bot.db.get_ai_notification(ctx.guild.id)
        
        if not notification:
            await ctx.send("‚ùå Ch∆∞a thi·∫øt l·∫≠p AI notifications! S·ª≠ d·ª•ng `f!ai setupnotify` tr∆∞·ªõc.")
            return
        
        if enabled is None:
            enabled = not notification.enabled
        
        await self.bot.db.toggle_ai_notification(ctx.guild.id, enabled)
        
        status = "b·∫≠t" if enabled else "t·∫Øt"
        emoji = "üü¢" if enabled else "üî¥"
        
        embed = EmbedBuilder.create_base_embed(
            title=f"{emoji} AI Notifications {status.title()}",
            description=f"Th√¥ng b√°o AI ƒë√£ ƒë∆∞·ª£c {status}",
            color=0x2ECC71 if enabled else 0xE74C3C
        )
        await ctx.send(embed=embed)
    
    @ai_commands.command(name='toggleevent', aliases=['toggle_event_notifications'])
    @commands.has_permissions(manage_channels=True)
    async def toggle_ai_event_notifications(self, ctx, enabled: bool = None):
        """B·∫≠t/t·∫Øt AI event notifications"""
        notification = await self.bot.db.get_ai_notification(ctx.guild.id)
        
        if not notification:
            await ctx.send("‚ùå Ch∆∞a thi·∫øt l·∫≠p AI notifications! S·ª≠ d·ª•ng `f!ai setupnotify` tr∆∞·ªõc.")
            return
        
        if enabled is None:
            enabled = not notification.event_notifications
        
        await self.bot.db.toggle_ai_event_notification(ctx.guild.id, enabled)
        
        status = "b·∫≠t" if enabled else "t·∫Øt"
        emoji = "üé™" if enabled else "‚ùå"
        
        embed = EmbedBuilder.create_base_embed(
            title=f"{emoji} AI Event Notifications {status.title()}",
            description=f"Th√¥ng b√°o AI events ƒë√£ ƒë∆∞·ª£c {status}",
            color=0x2ECC71 if enabled else 0xE74C3C
        )
        await ctx.send(embed=embed)
    
    @ai_commands.command(name='toggleweather', aliases=['toggle_weather_notifications'])
    @commands.has_permissions(manage_channels=True) 
    async def toggle_ai_weather_notifications(self, ctx, enabled: bool = None):
        """B·∫≠t/t·∫Øt AI weather notifications"""
        notification = await self.bot.db.get_ai_notification(ctx.guild.id)
        
        if not notification:
            await ctx.send("‚ùå Ch∆∞a thi·∫øt l·∫≠p AI notifications! S·ª≠ d·ª•ng `f!ai setupnotify` tr∆∞·ªõc.")
            return
        
        if enabled is None:
            enabled = not notification.weather_notifications
        
        await self.bot.db.toggle_ai_weather_notification(ctx.guild.id, enabled)
        
        status = "b·∫≠t" if enabled else "t·∫Øt"
        emoji = "üå§Ô∏è" if enabled else "‚ùå"
        
        embed = EmbedBuilder.create_base_embed(
            title=f"{emoji} AI Weather Notifications {status.title()}",
            description=f"Th√¥ng b√°o AI weather ƒë√£ ƒë∆∞·ª£c {status}",
            color=0x2ECC71 if enabled else 0xE74C3C
        )
        await ctx.send(embed=embed)
    
    # Wait for bot to be ready
    @ai_decision_task.before_loop
    async def before_ai_task(self):
        await self.bot.wait_until_ready()
        
    @ai_weather_task.before_loop
    async def before_weather_task(self):
        await self.bot.wait_until_ready()

    @ai_decision_task.error
    async def ai_decision_task_error(self, error):
        """Handle AI decision task errors"""
        logger.error(f"AI decision task crashed: {error}")
        # Task will automatically restart due to @tasks.loop
        await asyncio.sleep(60)  # Wait 1 minute before restart

async def setup(bot):
    await bot.add_cog(AICog(bot))
