"""
Pond System - Nu√¥i c√°
Qu·∫£n l√Ω ao c√°, mua/b√°n c√°, thu ho·∫°ch c√°
"""

import discord
from discord.ext import commands
from datetime import datetime, timedelta
import asyncio
from typing import Optional, List, Dict, Any

import config
from database.database import Database
from database.models import Species, UserLivestock, UserFacilities
from utils.embeds import EmbedBuilder
from utils.livestock_helpers import (
    calculate_livestock_maturity, get_livestock_display_info,
    get_livestock_weather_modifier, validate_facility_slot,
    get_available_species_for_purchase, format_livestock_value,
    calculate_livestock_value, get_weather_modifier
)
# Remove direct imports to avoid circular imports

class PondCog(commands.Cog):
    """Pond management system for fish farming"""
    
    def __init__(self, bot):
        self.bot = bot
        self.db = bot.db
    
    @commands.group(name='pond', aliases=['ao'], invoke_without_command=True)
    async def pond(self, ctx):
        """üêü Qu·∫£n l√Ω ao c√° - Xem tr·∫°ng th√°i ao c√° c·ªßa b·∫°n
        
        Subcommands:
        ‚Ä¢ f!pond buy <lo·∫°i_c√°> [s·ªë_l∆∞·ª£ng] - Mua c√° cho ao
        ‚Ä¢ f!pond harvest [√¥] - Thu ho·∫°ch c√° ƒë√£ tr∆∞·ªüng th√†nh
        ‚Ä¢ f!pond upgrade - N√¢ng c·∫•p ao c√°
        
        S·ª≠ d·ª•ng: f!pond
        """
        await self.show_pond(ctx)
    
    @pond.command(name='buy', aliases=['mua'])
    async def buy_fish(self, ctx, fish_type: str = None, quantity: int = 1):
        """üõí Mua c√° cho ao - Mua c√°c lo·∫°i c√° ƒë·ªÉ nu√¥i trong ao
        
        S·ª≠ d·ª•ng: f!pond buy [lo·∫°i_c√°] [s·ªë_l∆∞·ª£ng]
        V√≠ d·ª•: f!pond buy carp 2
        """
        await self.buy_fish_command(ctx, fish_type, quantity)
    
    @pond.command(name='harvest', aliases=['thu'])
    async def harvest_fish(self, ctx, slot: str = None):
        """üé£ Thu ho·∫°ch c√° - Thu ho·∫°ch c√° ƒë√£ tr∆∞·ªüng th√†nh t·ª´ ao
        
        S·ª≠ d·ª•ng: f!pond harvest [s·ªë_√¥]
        V√≠ d·ª•: f!pond harvest 1
        """
        await self.harvest_fish_command(ctx, slot)
    
    @pond.command(name='upgrade', aliases=['nangcap'])
    async def upgrade_pond(self, ctx):
        """‚¨ÜÔ∏è N√¢ng c·∫•p ao c√° - TƒÉng s·ªë l∆∞·ª£ng √¥ nu√¥i c√°
        
        S·ª≠ d·ª•ng: f!pond upgrade
        """
        await self.upgrade_pond_command(ctx)
    
    async def show_pond(self, ctx):
        """Display pond status with fish information"""
        try:
            user_id = ctx.author.id
            
            # Check if user is registered
            user = await self.db.get_user(user_id)
            if not user:
                await ctx.send(embed=EmbedBuilder.create_error_embed("‚ùå B·∫°n ch∆∞a ƒëƒÉng k√Ω! S·ª≠ d·ª•ng `f!register` ƒë·ªÉ b·∫Øt ƒë·∫ßu."))
                return
            
            # Get user facilities
            facilities = await self.db.get_user_facilities(user_id)
            if not facilities:
                # Create default facilities
                facilities = await self.db.create_user_facilities(user_id)
            
            # Get fish in pond
            fish_list = await self.db.get_user_livestock(user_id, 'pond')
            
            # Get current weather modifier
            weather_modifier = 1.0
            current_weather = "sunny"
            try:
                weather_cog = self.bot.get_cog('WeatherCog')
                if weather_cog and hasattr(weather_cog, 'current_weather'):
                    current_weather_data = weather_cog.current_weather
                    # Extract weather type from dict or use as string
                    if isinstance(current_weather_data, dict):
                        current_weather = current_weather_data.get('type', 'sunny')
                    else:
                        current_weather = current_weather_data
                    # Get weather modifier
                    from utils.livestock_helpers import get_livestock_weather_modifier
                    weather_modifier = get_livestock_weather_modifier(current_weather, 'fish')
            except Exception as e:
                print(f"Weather error: {e}")
                pass
            
            # Get event modifier
            event_modifier = 1.0
            try:
                events_cog = self.bot.get_cog('EventsCog')
                if events_cog and hasattr(events_cog, 'get_current_growth_modifier'):
                    event_modifier = events_cog.get_current_growth_modifier()
            except:
                pass
            
            total_modifier = weather_modifier * event_modifier
            
            # Create embed
            embed = EmbedBuilder.create_base_embed(
                title=f"üêü Ao C√° c·ªßa {ctx.author.display_name}",
                description=f"**C·∫•p ƒë·ªô:** {facilities.pond_level} | **S·ªë √¥:** {facilities.pond_slots}/6\n"
                           f"**Th·ªùi ti·∫øt:** {current_weather.title()} (√ó{weather_modifier:.1f})",
                color=0x1e90ff
            )
            
            # Show pond slots
            pond_display = []
            for i in range(facilities.pond_slots):
                slot_fish = next((f for f in fish_list if f.facility_slot == i), None)
                if slot_fish:
                    # Get fish species info
                    species = await self.db.get_species(slot_fish.species_id)
                    if species:
                        # Check if mature
                        is_mature, _ = calculate_livestock_maturity(
                            slot_fish, total_modifier, 1.0
                        )
                        
                        if is_mature:
                            status = "‚ú® C√≥ th·ªÉ thu ho·∫°ch"
                            status_icon = "‚ú®"
                        else:
                            # Calculate remaining time
                            elapsed = (datetime.now() - slot_fish.birth_time).total_seconds()
                            adjusted_growth_time = species.growth_time / total_modifier
                            remaining = max(0, adjusted_growth_time - elapsed)
                            
                            if remaining > 0:
                                mins = int(remaining // 60)
                                secs = int(remaining % 60)
                                status = f"‚è∞ {mins}p {secs}s"
                                status_icon = "üêü"
                            else:
                                status = "‚ú® C√≥ th·ªÉ thu ho·∫°ch"
                                status_icon = "‚ú®"
                        
                        pond_display.append(f"**√î {i+1}:** {status_icon} {species.name}")
                    else:
                        pond_display.append(f"**√î {i+1}:** ‚ùå L·ªói d·ªØ li·ªáu")
                else:
                    pond_display.append(f"**√î {i+1}:** ‚¨ú Tr·ªëng")
            
            if pond_display:
                embed.add_field(
                    name="üó∫Ô∏è Tr·∫°ng th√°i ao c√°",
                    value="\n".join(pond_display),
                    inline=False
                )
            
            # Add statistics
            ready_count = 0
            for f in fish_list:
                if f:
                    species = await self.db.get_species(f.species_id)
                    if species:
                        is_mature, _ = calculate_livestock_maturity(f, total_modifier, 1.0)
                        if is_mature:
                            ready_count += 1
            
            embed.add_field(
                name="üìä Th·ªëng k√™",
                value=f"üêü T·ªïng c√°: {len(fish_list)}/{facilities.pond_slots}\n"
                      f"‚ú® S·∫µn s√†ng: {ready_count}\n"
                      f"üí∞ S·ªë d∆∞: {user.money:,} coins",
                inline=True
            )
            
            # Add upgrade info
            if facilities.pond_level < 6:
                next_level = facilities.pond_level + 1
                upgrade_cost = config.POND_UPGRADE_COSTS.get(next_level, 0)
                embed.add_field(
                    name="‚¨ÜÔ∏è N√¢ng c·∫•p",
                    value=f"C·∫•p {next_level}: +2 √¥\nüí∞ Chi ph√≠: {upgrade_cost:,} coins",
                    inline=True
                )
            
            await ctx.send(embed=embed)
            
        except Exception as e:
            # Enhanced error logging for debugging
            error_msg = f"‚ùå L·ªói hi·ªÉn th·ªã ao: {str(e)}"
            print(f"\nüêõ POND ERROR DEBUG:")
            print(f"Error: {e}")
            print(f"Type: {type(e).__name__}")
            
            if "unhashable" in str(e).lower():
                import traceback
                import sys
                print(f"üîç UNHASHABLE TYPE ERROR DETECTED!")
                print(f"Full traceback:")
                traceback.print_exc()
                
                # Try to identify the problematic line
                tb = sys.exc_info()[2]
                while tb.tb_next:
                    tb = tb.tb_next
                print(f"Error at line {tb.tb_lineno} in {tb.tb_frame.f_code.co_filename}")
                print(f"Local variables: {tb.tb_frame.f_locals}")
            
            await ctx.send(embed=EmbedBuilder.create_error_embed(error_msg))
    
    async def buy_fish_command(self, ctx, fish_type: str = None, quantity: int = 1):
        """Handle fish purchase"""
        try:
            user_id = ctx.author.id
            
            # Check if user is registered
            user = await self.db.get_user(user_id)
            if not user:
                await ctx.send(embed=EmbedBuilder.create_error_embed("‚ùå B·∫°n ch∆∞a ƒëƒÉng k√Ω! S·ª≠ d·ª•ng `f!register` ƒë·ªÉ b·∫Øt ƒë·∫ßu."))
                return
            
            # If no fish type specified, show shop
            if not fish_type:
                await self.show_fish_shop(ctx)
                return
            
            # Validate quantity
            if quantity < 1 or quantity > 10:
                quantity = 1
            
            # Get facilities
            facilities = await self.db.get_user_facilities(user_id)
            if not facilities:
                facilities = await self.db.create_user_facilities(user_id)
            
            # Check available slots
            current_fish = await self.db.get_user_livestock(user_id, 'pond')
            available_slots = facilities.pond_slots - len(current_fish)
            
            if available_slots < quantity:
                await ctx.send(embed=EmbedBuilder.create_error_embed(
                    f"‚ùå Kh√¥ng ƒë·ªß ch·ªó trong ao! C√≤n tr·ªëng: {available_slots} √¥"
                ))
                return
            
            # Find fish species
            fish_species = None
            species_id = None
            for species_id, species_data in config.FISH_SPECIES.items():
                if (fish_type.lower() in species_data['name'].lower() or 
                    fish_type.lower() == species_id or
                    fish_type.lower() in species_data.get('aliases', [])):
                    fish_species = species_data
                    break
            
            if not fish_species:
                await ctx.send(embed=EmbedBuilder.create_error_embed(f"‚ùå Kh√¥ng t√¨m th·∫•y lo·∫°i c√° `{fish_type}`!"))
                return
            
            # Check if user has enough money
            total_cost = fish_species['buy_price'] * quantity
            if user.money < total_cost:
                await ctx.send(embed=EmbedBuilder.create_error_embed(
                    f"‚ùå Kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn: {total_cost:,} coins, c√≥: {user.money:,} coins"
                ))
                return
            
            # Find available slots
            used_slots = {f.facility_slot for f in current_fish}
            available_slot_indices = [i for i in range(facilities.pond_slots) if i not in used_slots]
            
            if len(available_slot_indices) < quantity:
                await ctx.send(embed=EmbedBuilder.create_error_embed(
                    f"‚ùå Kh√¥ng ƒë·ªß ch·ªó trong ao! C√≤n tr·ªëng: {len(available_slot_indices)} √¥"
                ))
                return
            
            # Purchase fish
            purchased_slots = []
            for i in range(quantity):
                slot_index = available_slot_indices[i]
                
                # Add fish to database  
                livestock_id = await self.db.add_livestock(
                    user_id=user_id,
                    species_id=species_id,
                    facility_type='pond',
                    facility_slot=slot_index,
                    birth_time=datetime.now()
                )
                
                if livestock_id:
                    purchased_slots.append(slot_index + 1)  # Display as 1-indexed
            
            if purchased_slots:
                # Deduct money
                await self.db.update_user_money(user_id, -total_cost)
                
                # Create success embed
                embed = EmbedBuilder.create_success_embed(
                    title="üêü Mua c√° th√†nh c√¥ng!",
                    message=f"**ƒê√£ mua:** {quantity}x {fish_species['name']}\n"
                           f"**V·ªã tr√≠:** √î {', '.join(map(str, purchased_slots))}\n"
                           f"**Chi ph√≠:** {total_cost:,} coins\n"
                           f"**Th·ªùi gian l·ªõn:** {fish_species['growth_time'] // 60} ph√∫t"
                )
                embed.color = 0x1e90ff
                await ctx.send(embed=embed)
            else:
                await ctx.send(embed=EmbedBuilder.create_error_embed("‚ùå Kh√¥ng th·ªÉ mua c√°! Vui l√≤ng th·ª≠ l·∫°i."))
                
        except Exception as e:
            await ctx.send(embed=EmbedBuilder.create_error_embed(f"‚ùå L·ªói mua c√°: {str(e)}"))
    
    async def harvest_fish_command(self, ctx, slot: str = None):
        """Handle fish harvesting"""
        try:
            user_id = ctx.author.id
            
            # Check if user is registered
            user = await self.db.get_user(user_id)
            if not user:
                await ctx.send(embed=EmbedBuilder.create_error_embed("‚ùå B·∫°n ch∆∞a ƒëƒÉng k√Ω! S·ª≠ d·ª•ng `f!register` ƒë·ªÉ b·∫Øt ƒë·∫ßu."))
                return
            
            # Get fish in pond
            fish_list = await self.db.get_user_livestock(user_id, 'pond')
            if not fish_list:
                await ctx.send(embed=EmbedBuilder.create_error_embed("‚ùå Ao c·ªßa b·∫°n ƒëang tr·ªëng!"))
                return
            
            # Get weather and event modifiers
            weather_modifier = get_weather_modifier(self.bot, 'fish')
            event_modifier = 1.0
            try:
                events_cog = self.bot.get_cog('EventsCog')
                if events_cog and hasattr(events_cog, 'get_current_growth_modifier'):
                    event_modifier = events_cog.get_current_growth_modifier()
            except:
                pass
            
            total_modifier = weather_modifier * event_modifier
            
            # If no slot specified, harvest all ready fish
            if slot is None or slot.lower() == 'all':
                ready_fish = []
                for fish in fish_list:
                    species_config = config.FISH_SPECIES.get(fish.species_id)
                    if species_config:
                        time_passed = (datetime.now() - fish.birth_time).total_seconds()
                        adjusted_growth_time = species_config['growth_time'] / total_modifier
                        if time_passed >= adjusted_growth_time:
                            ready_fish.append((fish, species_config))
                
                if not ready_fish:
                    await ctx.send(embed=EmbedBuilder.create_error_embed("‚ùå Kh√¥ng c√≥ c√° n√†o s·∫µn s√†ng thu ho·∫°ch!"))
                    return
                
                # Harvest all ready fish
                total_value = 0
                harvested_fish = []
                
                for fish, species_config in ready_fish:
                    # Calculate value with weather bonus
                    fish_value = int(species_config['sell_price'] * weather_modifier)
                    total_value += fish_value
                    harvested_fish.append(f"{species_config['name']} (√î {fish.facility_slot + 1}): {fish_value:,} coins")
                    
                    # Remove from database
                    await self.db.remove_livestock(fish.livestock_id)
                
                # Add money to user
                await self.db.update_user_money(user_id, total_value)
                
                # Create success embed
                embed = EmbedBuilder.create_success_embed(
                    title="üêü Thu ho·∫°ch th√†nh c√¥ng!",
                    message=f"**ƒê√£ thu ho·∫°ch:** {len(ready_fish)} con c√°\n"
                           f"**T·ªïng gi√° tr·ªã:** {total_value:,} coins\n"
                           f"**S·ªë d∆∞ m·ªõi:** {user.money + total_value:,} coins"
                )
                embed.color = 0x1e90ff
                
                # Add detailed breakdown if not too long
                if len(harvested_fish) <= 5:
                    embed.add_field(
                        name="üìã Chi ti·∫øt",
                        value="\n".join(harvested_fish),
                        inline=False
                    )
                
                await ctx.send(embed=embed)
                return
            
            # Harvest specific slot
            try:
                slot_index = int(slot) - 1  # Convert to 0-indexed
            except ValueError:
                await ctx.send(embed=EmbedBuilder.create_error_embed(
                    "‚ùå S·ªë √¥ kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng: `f!pond harvest <s·ªë_√¥>` ho·∫∑c `f!pond harvest all`"
                ))
                return
            
            # Find fish in specified slot
            target_fish = next((f for f in fish_list if f.facility_slot == slot_index), None)
            if not target_fish:
                await ctx.send(embed=EmbedBuilder.create_error_embed(f"‚ùå √î {slot} ƒëang tr·ªëng!"))
                return
            
            # Get species info
            species_config = config.FISH_SPECIES.get(target_fish.species_id)
            if not species_config:
                await ctx.send(embed=EmbedBuilder.create_error_embed(
                    f"‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin lo√†i c√° trong √¥ {slot}!"
                ))
                return
            
            # Check if fish is mature
            time_passed = (datetime.now() - target_fish.birth_time).total_seconds()
            adjusted_growth_time = species_config['growth_time'] / total_modifier
            if time_passed < adjusted_growth_time:
                await ctx.send(embed=EmbedBuilder.create_error_embed("‚ùå C√° ch∆∞a tr∆∞·ªüng th√†nh!"))
                return
            
            # Calculate value
            fish_value = int(species_config['sell_price'] * weather_modifier)
            
            # Remove fish and add money
            await self.db.remove_livestock(target_fish.livestock_id)
            await self.db.update_user_money(user_id, fish_value)
            
            # Create success embed
            embed = EmbedBuilder.create_success_embed(
                title="üêü Thu ho·∫°ch th√†nh c√¥ng!",
                message=f"**ƒê√£ thu ho·∫°ch:** {species_config['name']} (√î {slot})\n"
                       f"**Gi√° tr·ªã:** {fish_value:,} coins\n"
                       f"**S·ªë d∆∞ m·ªõi:** {user.money + fish_value:,} coins"
            )
            embed.color = 0x1e90ff
            await ctx.send(embed=embed)
            
        except Exception as e:
            await ctx.send(embed=EmbedBuilder.create_error_embed(f"‚ùå L·ªói thu ho·∫°ch: {str(e)}"))
    
    async def upgrade_pond_command(self, ctx):
        """Handle pond upgrade"""
        try:
            user_id = ctx.author.id
            
            # Check if user is registered
            user = await self.db.get_user(user_id)
            if not user:
                await ctx.send(embed=EmbedBuilder.create_error_embed("‚ùå B·∫°n ch∆∞a ƒëƒÉng k√Ω! S·ª≠ d·ª•ng `f!register` ƒë·ªÉ b·∫Øt ƒë·∫ßu."))
                return
            
            # Get facilities
            facilities = await self.db.get_user_facilities(user_id)
            if not facilities:
                await ctx.send(embed=EmbedBuilder.create_error_embed("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin c∆° s·ªü!"))
                return
            
            # Check if pond is at max level
            if facilities.pond_level >= 6:
                await ctx.send(embed=EmbedBuilder.create_error_embed("‚ùå Ao ƒë√£ ƒë·∫°t c·∫•p ƒë·ªô t·ªëi ƒëa!"))
                return
            
            # Get upgrade cost
            next_level = facilities.pond_level + 1
            upgrade_cost = config.POND_UPGRADE_COSTS.get(next_level, 0)
            if user.money < upgrade_cost:
                await ctx.send(embed=EmbedBuilder.create_error_embed(
                    f"‚ùå Kh√¥ng ƒë·ªß ti·ªÅn n√¢ng c·∫•p!\n"
                    f"C·∫ßn: {upgrade_cost:,} coins\n"
                    f"C√≥: {user.money:,} coins"
                ))
                return
            
            # Perform upgrade
            new_slots = facilities.pond_slots + 2
            facilities.pond_level = next_level
            facilities.pond_slots = new_slots
            await self.db.update_user_facilities(facilities)
            
            # Deduct money
            await self.db.update_user_money(user_id, -upgrade_cost)
            
            # Create success embed
            embed = EmbedBuilder.create_success_embed(
                title="‚¨ÜÔ∏è N√¢ng c·∫•p ao th√†nh c√¥ng!",
                message=f"**C·∫•p ƒë·ªô m·ªõi:** {next_level}\n"
                       f"**S·ªë √¥ m·ªõi:** {new_slots}\n"
                       f"**Chi ph√≠:** {upgrade_cost:,} coins\n"
                       f"**S·ªë d∆∞ c√≤n l·∫°i:** {user.money - upgrade_cost:,} coins"
            )
            embed.color = 0x1e90ff
            await ctx.send(embed=embed)
            
        except Exception as e:
            await ctx.send(embed=EmbedBuilder.create_error_embed(f"‚ùå L·ªói n√¢ng c·∫•p: {str(e)}"))
    
    async def show_fish_shop(self, ctx):
        """Display fish shop with available species"""
        try:
            # Get all fish species
            fish_species = []
            for species_id, species_data in config.FISH_SPECIES.items():
                species = await self.db.get_species(species_id)
                if species:
                    fish_species.append(species)
            
            if not fish_species:
                await ctx.send(embed=EmbedBuilder.create_error_embed("‚ùå Kh√¥ng c√≥ c√° n√†o ƒë·ªÉ b√°n!"))
                return
            
            # Sort by tier and price
            fish_species.sort(key=lambda x: (x.tier, x.buy_price))
            
            # Create shop embed
            embed = EmbedBuilder.create_base_embed(
                title="üêü C·ª≠a h√†ng c√°",
                description="Ch·ªçn lo·∫°i c√° ƒë·ªÉ mua cho ao c·ªßa b·∫°n!",
                color=0x1e90ff
            )
            
            # Group by tier
            tier_names = {1: "ü•â C∆° b·∫£n", 2: "ü•à Cao c·∫•p", 3: "ü•á Huy·ªÅn tho·∫°i"}
            current_tier = None
            tier_fish = []
            
            for species in fish_species:
                if current_tier != species.tier:
                    if tier_fish:
                        # Add previous tier to embed
                        embed.add_field(
                            name=tier_names.get(current_tier, f"Tier {current_tier}"),
                            value="\n".join(tier_fish),
                            inline=False
                        )
                    current_tier = species.tier
                    tier_fish = []
                
                # Add species to current tier
                growth_mins = species.growth_time // 60
                tier_fish.append(
                    f"**{species.name}** - {species.buy_price:,} coins ({growth_mins}p)"
                )
            
            # Add last tier
            if tier_fish:
                embed.add_field(
                    name=tier_names.get(current_tier, f"Tier {current_tier}"),
                    value="\n".join(tier_fish),
                    inline=False
                )
            
            embed.add_field(
                name="üí° H∆∞·ªõng d·∫´n",
                value="S·ª≠ d·ª•ng: `f!pond buy <t√™n_c√°> [s·ªë_l∆∞·ª£ng]`\n"
                      "V√≠ d·ª•: `f!pond buy c√°_v√†ng 2`",
                inline=False
            )
            
            await ctx.send(embed=embed)
            
        except Exception as e:
            await ctx.send(embed=EmbedBuilder.create_error_embed(f"‚ùå L·ªói hi·ªÉn th·ªã c·ª≠a h√†ng: {str(e)}"))

async def setup(bot):
    """Setup function for the cog"""
    await bot.add_cog(PondCog(bot)) 