"""
Barn System - Nu√¥i gia s√∫c
Qu·∫£n l√Ω chu·ªìng tr·∫°i, mua/b√°n gia s√∫c, thu ho·∫°ch s·∫£n ph·∫©m
"""

import discord
from discord.ext import commands
from datetime import datetime, timedelta
import asyncio
from typing import Optional, List

import config
from database.database import Database
from database.models import Species, UserLivestock, UserFacilities, LivestockProduct
from utils.embeds import EmbedBuilder
from utils.livestock_helpers import (
    calculate_livestock_maturity, get_livestock_display_info,
    get_livestock_weather_modifier, validate_facility_slot,
    get_available_species_for_purchase, format_livestock_value,
    can_collect_product, get_product_ready_time, get_weather_modifier
)

class BarnCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = Database(config.DATABASE_PATH)
    
    async def cog_load(self):
        """Initialize database connection when cog loads"""
        await self.db.init_db()
    
    async def cog_unload(self):
        """Close database connection when cog unloads"""
        await self.db.close()
    
    def get_current_modifiers(self):
        """Get current weather and event modifiers"""
        # Get weather modifier using helper function
        weather_modifier = get_weather_modifier(self.bot, 'animal')
        
        # Get current weather for display
        current_weather = "sunny"
        weather_cog = self.bot.get_cog('WeatherCog')
        if weather_cog and hasattr(weather_cog, 'current_weather'):
            current_weather_data = weather_cog.current_weather
            if isinstance(current_weather_data, dict):
                current_weather = current_weather_data.get('type', 'sunny')
            elif isinstance(current_weather_data, str):
                current_weather = current_weather_data
            else:
                current_weather = 'sunny'
        
        # Get event modifier
        events_cog = self.bot.get_cog('EventsCog')
        event_growth_modifier = 1.0
        
        if events_cog and hasattr(events_cog, 'get_current_growth_modifier'):
            event_growth_modifier = events_cog.get_current_growth_modifier()
        
        return weather_modifier, event_growth_modifier, current_weather
    
    @commands.group(name='barn', aliases=['chuong'], invoke_without_command=True)
    async def barn_group(self, ctx):
        """üêÑ Qu·∫£n l√Ω chu·ªìng tr·∫°i - Xem tr·∫°ng th√°i chu·ªìng gia s√∫c
        
        Subcommands:
        ‚Ä¢ f!barn buy <lo·∫°i_gia_s√∫c> [s·ªë_l∆∞·ª£ng] - Mua gia s√∫c
        ‚Ä¢ f!barn harvest [√¥] - Thu ho·∫°ch gia s√∫c tr∆∞·ªüng th√†nh
        ‚Ä¢ f!barn collect [√¥] - Thu th·∫≠p s·∫£n ph·∫©m (s·ªØa, tr·ª©ng...)
        ‚Ä¢ f!barn upgrade - N√¢ng c·∫•p chu·ªìng
        
        S·ª≠ d·ª•ng: f!barn
        """
        await self.show_barn(ctx)
    
    @barn_group.command(name='buy', aliases=['mua'])
    async def buy_animal(self, ctx, animal_type: str = None, quantity: int = 1):
        """üõí Mua gia s√∫c cho chu·ªìng tr·∫°i
        
        S·ª≠ d·ª•ng: f!barn buy <lo·∫°i_gia_s√∫c> [s·ªë_l∆∞·ª£ng]
        V√≠ d·ª•: f!barn buy heo 2
        """
        if animal_type is None:
            await self.show_animal_shop(ctx)
            return
            
        await self.buy_animal_command(ctx, animal_type, quantity)
    
    @barn_group.command(name='harvest', aliases=['thu'])
    async def harvest_animal(self, ctx, slot: str = None):
        """ü•© Thu ho·∫°ch gia s√∫c tr∆∞·ªüng th√†nh
        
        S·ª≠ d·ª•ng: f!barn harvest [√¥]
        V√≠ d·ª•: f!barn harvest 1 ho·∫∑c f!barn harvest all
        """
        await self.harvest_animal_command(ctx, slot)
    
    @barn_group.command(name='collect', aliases=['thu_san_pham'])
    async def collect_product(self, ctx, slot: str = None):
        """ü•õ Thu th·∫≠p s·∫£n ph·∫©m t·ª´ gia s√∫c
        
        S·ª≠ d·ª•ng: f!barn collect [√¥]
        V√≠ d·ª•: f!barn collect 1 ho·∫∑c f!barn collect all
        """
        await self.collect_product_command(ctx, slot)
    
    @barn_group.command(name='upgrade', aliases=['nangcap'])
    async def upgrade_barn(self, ctx):
        """üîß N√¢ng c·∫•p chu·ªìng tr·∫°i
        
        S·ª≠ d·ª•ng: f!barn upgrade
        """
        await self.upgrade_barn_command(ctx)

    async def show_barn(self, ctx):
        """Display user's barn status"""
        user_id = ctx.author.id
        
        try:
            # Get user and facilities
            user = await self.db.get_user(user_id)
            if not user:
                await ctx.send(embed=EmbedBuilder.create_error_embed("‚ùå B·∫°n ch∆∞a ƒëƒÉng k√Ω! S·ª≠ d·ª•ng `f!register` ƒë·ªÉ b·∫Øt ƒë·∫ßu."))
                return
            
            facilities = await self.db.get_user_facilities(user_id)
            
            # Get barn livestock
            barn_livestock = await self.db.get_user_livestock(user_id, 'barn')
            
            # Get modifiers
            weather_modifier, event_growth_modifier, current_weather = self.get_current_modifiers()
            
            # Create embed
            embed = EmbedBuilder.create_base_embed(
                title=f"üêÑ Chu·ªìng Tr·∫°i c·ªßa {ctx.author.display_name}",
                description=f"**C·∫•p ƒë·ªô:** {facilities.barn_level} | **S·ªë √¥:** {facilities.barn_slots}/6\n"
                           f"**Th·ªùi ti·∫øt:** {current_weather.title()} (√ó{weather_modifier:.1f})"
            )
            
            # Display each barn slot
            for slot in range(facilities.barn_slots):
                # Find livestock in this slot
                livestock_in_slot = None
                for livestock in barn_livestock:
                    if livestock.facility_slot == slot:
                        livestock_in_slot = livestock
                        break
                
                if livestock_in_slot:
                    # Get species info from config
                    species_config = config.ANIMAL_SPECIES.get(livestock_in_slot.species_id)
                    if species_config:
                        # Calculate maturity
                        total_modifier = weather_modifier * event_growth_modifier
                        birth_time = livestock_in_slot.birth_time
                        growth_time = species_config['growth_time']
                    
                        # Calculate time passed and remaining
                        time_passed = (datetime.now() - birth_time).total_seconds()
                        adjusted_growth_time = growth_time / total_modifier
                        is_mature = time_passed >= adjusted_growth_time
                        
                        if is_mature:
                            status = "üü¢ Tr∆∞·ªüng th√†nh"
                            time_remaining = ""
                        else:
                            remaining_seconds = adjusted_growth_time - time_passed
                            hours = int(remaining_seconds // 3600)
                            minutes = int((remaining_seconds % 3600) // 60)
                            status = "üü° ƒêang l·ªõn"
                            time_remaining = f"‚è∞ C√≤n: {hours}h {minutes}m\n"
                        
                        slot_value = f"{species_config['emoji']} **{species_config['name']}**\n"
                        slot_value += f"üìä {status}\n"
                        slot_value += time_remaining
                        slot_value += f"‚ú® {species_config['special_ability']}"
                        
                        embed.add_field(
                            name=f"üêÑ √î {slot + 1}",
                            value=slot_value,
                            inline=True
                        )
                else:
                    embed.add_field(
                        name=f"‚¨ú √î {slot + 1}",
                        value="*Tr·ªëng*\nS·ª≠ d·ª•ng `f!barn buy` ƒë·ªÉ mua gia s√∫c",
                        inline=True
                    )
            
            # Add expansion info if not max level
            if facilities.barn_level < 6:
                next_level = facilities.barn_level + 1
                expansion_cost = 1000 * (next_level ** 2)  # Simple cost formula
                embed.add_field(
                    name="üîß M·ªü r·ªông",
                    value=f"N√¢ng c·∫•p l√™n c·∫•p {next_level}: {expansion_cost:,}ü™ô\n"
                          f"S·ª≠ d·ª•ng `f!barn upgrade`",
                    inline=False
                )
            
            # Add footer with commands
            embed.set_footer(text="üí° f!barn buy | f!barn harvest | f!barn collect | f!barn upgrade")
            
            await ctx.send(embed=embed)
            
        except Exception as e:
            await ctx.send(embed=EmbedBuilder.create_error_embed(f"‚ùå L·ªói hi·ªÉn th·ªã chu·ªìng: {str(e)}"))

    async def buy_animal_command(self, ctx, animal_type: str, quantity: int = 1):
        """Handle animal purchase"""
        try:
            user_id = ctx.author.id
            
            # Validate quantity
            if quantity < 1 or quantity > 10:
                await ctx.send(embed=EmbedBuilder.create_error_embed("‚ùå S·ªë l∆∞·ª£ng ph·∫£i t·ª´ 1-10!"))
                return
            
            # Check if user is registered
            user = await self.db.get_user(user_id)
            if not user:
                await ctx.send(embed=EmbedBuilder.create_error_embed("‚ùå B·∫°n ch∆∞a ƒëƒÉng k√Ω! S·ª≠ d·ª•ng `f!register` ƒë·ªÉ b·∫Øt ƒë·∫ßu."))
                return
            
            # Get user facilities
            facilities = await self.db.get_user_facilities(user_id)
            
            # Get current animals in barn
            current_animals = await self.db.get_user_livestock(user_id, 'barn')
            available_slots = facilities.barn_slots - len(current_animals)
            
            if available_slots < quantity:
                await ctx.send(embed=EmbedBuilder.create_error_embed(
                    f"‚ùå Kh√¥ng ƒë·ªß ch·ªó trong chu·ªìng! C√≤n tr·ªëng: {available_slots} √¥"
                ))
                return
            
            # Find animal species
            animal_species = None
            species_id = None
            for species_id, species_data in config.ANIMAL_SPECIES.items():
                if (animal_type.lower() in species_data['name'].lower() or 
                    animal_type.lower() == species_id):
                    animal_species = species_data
                    break
            
            if not animal_species:
                await ctx.send(embed=EmbedBuilder.create_error_embed(f"‚ùå Kh√¥ng t√¨m th·∫•y lo·∫°i gia s√∫c `{animal_type}`!"))
                return
            
            # Check if user has enough money
            total_cost = animal_species['buy_price'] * quantity
            if user.money < total_cost:
                await ctx.send(embed=EmbedBuilder.create_error_embed(
                    f"‚ùå Kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn: {total_cost:,} coins, c√≥: {user.money:,} coins"
                ))
                return
            
            # Find available slots
            used_slots = {a.facility_slot for a in current_animals}
            available_slot_indices = [i for i in range(facilities.barn_slots) if i not in used_slots]
            
            if len(available_slot_indices) < quantity:
                await ctx.send(embed=EmbedBuilder.create_error_embed(
                    f"‚ùå Kh√¥ng ƒë·ªß ch·ªó trong chu·ªìng! C√≤n tr·ªëng: {len(available_slot_indices)} √¥"
                ))
                return
            
            # Purchase animals
            purchased_slots = []
            for i in range(quantity):
                slot_index = available_slot_indices[i]
                
                # Add animal to database  
                livestock_id = await self.db.add_livestock(
                    user_id=user_id,
                    species_id=species_id,
                    facility_type='barn',
                    facility_slot=slot_index,
                    birth_time=datetime.now()
                )
                
                if livestock_id:
                    purchased_slots.append(slot_index + 1)  # Display as 1-indexed
            
            if purchased_slots:
                # Deduct money
                await self.db.update_user_money(user_id, -total_cost)
                
                # Create success embed
                embed = EmbedBuilder.create_success_embed(
                    title="üêÑ Mua gia s√∫c th√†nh c√¥ng!",
                    message=f"**ƒê√£ mua:** {quantity}x {animal_species['name']}\n"
                           f"**V·ªã tr√≠:** √î {', '.join(map(str, purchased_slots))}\n"
                           f"**Chi ph√≠:** {total_cost:,} coins\n"
                           f"**Th·ªùi gian l·ªõn:** {animal_species['growth_time'] // 60} ph√∫t"
                )
                embed.color = 0x8B4513
                await ctx.send(embed=embed)
            else:
                await ctx.send(embed=EmbedBuilder.create_error_embed("‚ùå Kh√¥ng th·ªÉ mua gia s√∫c! Vui l√≤ng th·ª≠ l·∫°i."))
                
        except Exception as e:
            await ctx.send(embed=EmbedBuilder.create_error_embed(f"‚ùå L·ªói mua gia s√∫c: {str(e)}"))

    async def harvest_animal_command(self, ctx, slot: str = None):
        """Handle animal harvesting"""
        try:
            user_id = ctx.author.id
            
            # Check if user is registered
            user = await self.db.get_user(user_id)
            if not user:
                await ctx.send(embed=EmbedBuilder.create_error_embed("‚ùå B·∫°n ch∆∞a ƒëƒÉng k√Ω! S·ª≠ d·ª•ng `f!register` ƒë·ªÉ b·∫Øt ƒë·∫ßu."))
                return
            
            # Get animals in barn
            animals_list = await self.db.get_user_livestock(user_id, 'barn')
            if not animals_list:
                await ctx.send(embed=EmbedBuilder.create_error_embed("‚ùå Chu·ªìng c·ªßa b·∫°n ƒëang tr·ªëng!"))
                return
            
            # Get modifiers
            weather_modifier, event_modifier, _ = self.get_current_modifiers()
            total_modifier = weather_modifier * event_modifier
            
            # If no slot specified, harvest all ready animals
            if slot is None or slot.lower() == 'all':
                ready_animals = []
                for animal in animals_list:
                    species_config = config.ANIMAL_SPECIES.get(animal.species_id)
                    if species_config:
                        time_passed = (datetime.now() - animal.birth_time).total_seconds()
                        adjusted_growth_time = species_config['growth_time'] / total_modifier
                        if time_passed >= adjusted_growth_time:
                            ready_animals.append((animal, species_config))
                
                if not ready_animals:
                    await ctx.send(embed=EmbedBuilder.create_error_embed("‚ùå Kh√¥ng c√≥ gia s√∫c n√†o s·∫µn s√†ng thu ho·∫°ch!"))
                    return
                
                # Harvest all ready animals
                total_value = 0
                harvested_animals = []
                
                for animal, species_config in ready_animals:
                    animal_value = int(species_config['sell_price'] * weather_modifier)
                    total_value += animal_value
                    harvested_animals.append(f"{species_config['name']} (√î {animal.facility_slot + 1}): {animal_value:,} coins")
                    
                    # Remove from database
                    await self.db.remove_livestock(animal.livestock_id)
                
                # Add money to user
                await self.db.update_user_money(user_id, total_value)
                
                # Create success embed
                embed = EmbedBuilder.create_success_embed(
                    title="üêÑ Thu ho·∫°ch th√†nh c√¥ng!",
                    message=f"**ƒê√£ thu ho·∫°ch:** {len(ready_animals)} con gia s√∫c\n"
                           f"**T·ªïng gi√° tr·ªã:** {total_value:,} coins\n"
                           f"**S·ªë d∆∞ m·ªõi:** {user.money + total_value:,} coins"
                )
                embed.color = 0x8B4513
                
                # Add detailed breakdown if not too long
                if len(harvested_animals) <= 5:
                    embed.add_field(
                        name="üìã Chi ti·∫øt",
                        value="\n".join(harvested_animals),
                        inline=False
                    )
                
                await ctx.send(embed=embed)
                return
            
            # Harvest specific slot
            try:
                slot_index = int(slot) - 1  # Convert to 0-indexed
            except ValueError:
                await ctx.send(embed=EmbedBuilder.create_error_embed(
                    "‚ùå S·ªë √¥ kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng: `f!barn harvest <s·ªë_√¥>` ho·∫∑c `f!barn harvest all`"
                ))
                return
            
            # Find animal in specified slot
            target_animal = next((a for a in animals_list if a.facility_slot == slot_index), None)
            if not target_animal:
                await ctx.send(embed=EmbedBuilder.create_error_embed(f"‚ùå √î {slot} ƒëang tr·ªëng!"))
                return
            
            # Get species info
            species_config = config.ANIMAL_SPECIES.get(target_animal.species_id)
            if not species_config:
                await ctx.send(embed=EmbedBuilder.create_error_embed(
                    f"‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin lo√†i gia s√∫c trong √¥ {slot}!"
                ))
                return
            
            # Check if animal is mature
            time_passed = (datetime.now() - target_animal.birth_time).total_seconds()
            adjusted_growth_time = species_config['growth_time'] / total_modifier
            if time_passed < adjusted_growth_time:
                await ctx.send(embed=EmbedBuilder.create_error_embed("‚ùå Gia s√∫c ch∆∞a tr∆∞·ªüng th√†nh!"))
                return
            
            # Calculate value
            animal_value = int(species_config['sell_price'] * weather_modifier)
            
            # Remove animal and add money
            await self.db.remove_livestock(target_animal.livestock_id)
            await self.db.update_user_money(user_id, animal_value)
            
            # Create success embed
            embed = EmbedBuilder.create_success_embed(
                title="üêÑ Thu ho·∫°ch th√†nh c√¥ng!",
                message=f"**ƒê√£ thu ho·∫°ch:** {species_config['name']} (√î {slot})\n"
                       f"**Gi√° tr·ªã:** {animal_value:,} coins\n"
                       f"**S·ªë d∆∞ m·ªõi:** {user.money + animal_value:,} coins"
            )
            embed.color = 0x8B4513
            await ctx.send(embed=embed)
            
        except Exception as e:
            await ctx.send(embed=EmbedBuilder.create_error_embed(f"‚ùå L·ªói thu ho·∫°ch: {str(e)}"))

    async def collect_product_command(self, ctx, slot: str = None):
        """Handle product collection (placeholder for now)"""
        await ctx.send(embed=EmbedBuilder.create_error_embed("üöß T√≠nh nƒÉng thu th·∫≠p s·∫£n ph·∫©m ƒëang ph√°t tri·ªÉn!"))

    async def upgrade_barn_command(self, ctx):
        """Handle barn upgrade"""
        try:
            user_id = ctx.author.id
            
            # Check if user is registered
            user = await self.db.get_user(user_id)
            if not user:
                await ctx.send(embed=EmbedBuilder.create_error_embed("‚ùå B·∫°n ch∆∞a ƒëƒÉng k√Ω! S·ª≠ d·ª•ng `f!register` ƒë·ªÉ b·∫Øt ƒë·∫ßu."))
                return
            
            # Get user facilities
            facilities = await self.db.get_user_facilities(user_id)
            
            if facilities.barn_level >= 6:
                await ctx.send(embed=EmbedBuilder.create_error_embed("‚ùå Chu·ªìng tr·∫°i ƒë√£ ƒë·∫°t c·∫•p ƒë·ªô t·ªëi ƒëa!"))
                return
            
            # Calculate upgrade cost using config
            next_level = facilities.barn_level + 1
            upgrade_cost = config.BARN_UPGRADE_COSTS.get(next_level, 0)
            
            if upgrade_cost == 0:
                await ctx.send(embed=EmbedBuilder.create_error_embed("‚ùå Chu·ªìng tr·∫°i ƒë√£ ƒë·∫°t c·∫•p ƒë·ªô t·ªëi ƒëa!"))
                return
            
            if user.money < upgrade_cost:
                await ctx.send(embed=EmbedBuilder.create_error_embed(
                    f"‚ùå Kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn: {upgrade_cost:,} coins, c√≥: {user.money:,} coins"
                ))
                return
            
            # Perform upgrade
            await self.db.update_user_money(user_id, -upgrade_cost)
            
            # Update facilities
            new_slots = facilities.barn_slots + 2
            facilities.barn_level = next_level
            facilities.barn_slots = new_slots
            await self.db.update_user_facilities(facilities)
            
            # Create success embed
            embed = EmbedBuilder.create_success_embed(
                title="üîß N√¢ng c·∫•p th√†nh c√¥ng!",
                message=f"**Chu·ªìng tr·∫°i n√¢ng c·∫•p l√™n c·∫•p {next_level}!**\n"
                       f"**Chi ph√≠:** {upgrade_cost:,} coins\n"
                       f"**S·ªë √¥ m·ªõi:** {new_slots}\n"
                       f"**S·ªë d∆∞ c√≤n l·∫°i:** {user.money - upgrade_cost:,} coins"
            )
            embed.color = 0x8B4513
            await ctx.send(embed=embed)
            
        except Exception as e:
            await ctx.send(embed=EmbedBuilder.create_error_embed(f"‚ùå L·ªói n√¢ng c·∫•p: {str(e)}"))

    async def show_animal_shop(self, ctx):
        """Display animal shop"""
        embed = EmbedBuilder.create_base_embed(
            title="üõí C·ª≠a H√†ng Gia S√∫c",
            description="Ch·ªçn lo·∫°i gia s√∫c b·∫°n mu·ªën mua cho chu·ªìng tr·∫°i",
            color=0x8B4513
        )
        
        # Group animals by tier
        for tier in [1, 2, 3]:
            tier_animals = []
            for species_id, species_data in config.ANIMAL_SPECIES.items():
                if species_data['tier'] == tier:
                    tier_animals.append(
                        f"{species_data['emoji']} **{species_data['name']}**\n"
                        f"üí∞ {species_data['buy_price']:,} coins | "
                        f"‚è∞ {species_data['growth_time']//60}p | "
                        f"üíé {species_data['sell_price']:,} coins\n"
                        f"‚ú® {species_data['special_ability']}\n"
                        f"`f!barn buy {species_id}`"
                    )
            
            if tier_animals:
                tier_names = {1: "ü•â C∆° B·∫£n", 2: "ü•à Cao C·∫•p", 3: "ü•á Huy·ªÅn Tho·∫°i"}
                embed.add_field(
                    name=tier_names[tier],
                    value="\n\n".join(tier_animals),
                    inline=False
                )
        
        embed.set_footer(text="üí° S·ª≠ d·ª•ng: f!barn buy <lo·∫°i_gia_s√∫c> [s·ªë_l∆∞·ª£ng]")
        await ctx.send(embed=embed)

async def setup(bot):
    await bot.add_cog(BarnCog(bot))